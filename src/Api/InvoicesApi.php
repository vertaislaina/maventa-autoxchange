<?php
/**
 * InvoicesApi
 * PHP version 5
 *
 * @category Class
 * @package  Vertaislaina\Maventa\AutoXChange
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AutoXChange API
 *
 * ### Changelog #### 2021-04-19 12:49 UTC id:17d03991 (0.85.122) - Added email reports to company settings  #### 2021-04-16 11:39 UTC id:9986b15f (0.85.121)  #### 2021-04-15 13:38 UTC id:916907e3 (0.85.120) - Allow NL companies to change print attachments setting in invoice sending  #### 2021-04-15 13:01 UTC id:7a79b14f (0.85.119) - Show full error message in invoice events  #### 2021-04-13 06:35 UTC id:3c595833 (0.85.118) - Operator company scopes   ### Credentials  The API consumer is authenticated as a company and a user using the Company UUID and the personal User API Key. OAuth2 client_credentials flow is used for authentication, more details about the authentication can be found from the OAuth2 endpoint.  ### Timestamps  Timestamps returned by the API is be presented as UTC and in the ISO8601 format. Timestamps provided in the requests should also be presented in this way.   ``` 2016-09-23T09:09:06Z ```  ### Error handling Errors are presented using the HTTP status codes 400-599. The response include a more detailed explanation about the error in the body.  ``` {   \"code\": \"internal_error_code\",   \"message\": \"Cleartext explanation of the error that occurred\",   \"details\": [     \"More details\",     \"about the error\"   ] } ```  ### Generic API errors These error responses can be returned by any of the described endpoints.  | HTTP status  |  Description | |---|---| | 400| Bad input parameters or invalid request. More information can be found in the response body. | 401| The consumer does not have access to the requested resource or the provided token is not valid. | 404| The requested resource can not be found or the user does not have access to the resource. | 5XX| A server error has occurred while processing the request.
 *
 * OpenAPI spec version: 0.85.122
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Vertaislaina\Maventa\AutoXChange\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Vertaislaina\Maventa\AutoXChange\ApiException;
use Vertaislaina\Maventa\AutoXChange\Configuration;
use Vertaislaina\Maventa\AutoXChange\HeaderSelector;
use Vertaislaina\Maventa\AutoXChange\ObjectSerializer;

/**
 * InvoicesApi Class Doc Comment
 *
 * @category Class
 * @package  Vertaislaina\Maventa\AutoXChange
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InvoicesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteV1InvoicesIdReportsReportId
     *
     * @param  string $id Invoice ID (required)
     * @param  string $reportId Report ID (required)
     *
     * @throws \Vertaislaina\Maventa\AutoXChange\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteV1InvoicesIdReportsReportId($id, $reportId)
    {
        $this->deleteV1InvoicesIdReportsReportIdWithHttpInfo($id, $reportId);
    }

    /**
     * Operation deleteV1InvoicesIdReportsReportIdWithHttpInfo
     *
     * @param  string $id Invoice ID (required)
     * @param  string $reportId Report ID (required)
     *
     * @throws \Vertaislaina\Maventa\AutoXChange\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteV1InvoicesIdReportsReportIdWithHttpInfo($id, $reportId)
    {
        $returnType = '';
        $request = $this->deleteV1InvoicesIdReportsReportIdRequest($id, $reportId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Vertaislaina\Maventa\AutoXChange\Entity\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Vertaislaina\Maventa\AutoXChange\Entity\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Vertaislaina\Maventa\AutoXChange\Entity\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Vertaislaina\Maventa\AutoXChange\Entity\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteV1InvoicesIdReportsReportIdAsync
     *
     * 
     *
     * @param  string $id Invoice ID (required)
     * @param  string $reportId Report ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteV1InvoicesIdReportsReportIdAsync($id, $reportId)
    {
        return $this->deleteV1InvoicesIdReportsReportIdAsyncWithHttpInfo($id, $reportId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteV1InvoicesIdReportsReportIdAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id Invoice ID (required)
     * @param  string $reportId Report ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteV1InvoicesIdReportsReportIdAsyncWithHttpInfo($id, $reportId)
    {
        $returnType = '';
        $request = $this->deleteV1InvoicesIdReportsReportIdRequest($id, $reportId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteV1InvoicesIdReportsReportId'
     *
     * @param  string $id Invoice ID (required)
     * @param  string $reportId Report ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteV1InvoicesIdReportsReportIdRequest($id, $reportId)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteV1InvoicesIdReportsReportId'
            );
        }
        // verify the required parameter 'reportId' is set
        if ($reportId === null || (is_array($reportId) && count($reportId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reportId when calling deleteV1InvoicesIdReportsReportId'
            );
        }

        $resourcePath = '/v1/invoices/{id}/reports/{report_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($reportId !== null) {
            $resourcePath = str_replace(
                '{' . 'report_id' . '}',
                ObjectSerializer::toPathValue($reportId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getV1Invoices
     *
     * List invoices
     *
     * @param  string $direction Received or sent invoices (optional, default to RECEIVED)
     * @param  string[] $status Invoice status (optional)
     * @param  string[] $ids Batch of invoice IDs. Maximum of 100 per query (optional)
     * @param  string $number Invoice number (optional)
     * @param  string $reference Invoice reference (optional)
     * @param  \DateTime $receivedAtStart Received at start timestamp (optional)
     * @param  \DateTime $receivedAtEnd Received at end timestamp (optional)
     * @param  \DateTime $createdAtStart Created at start timestamp (optional)
     * @param  \DateTime $createdAtEnd Created at end timestamp (optional)
     * @param  string[] $sort List of fields used for sorting.   Ascending by default, include \&quot;-\&quot; before the field name to reverse the order (descending).   Supported values: **received_at**   E.g. -received_at (optional)
     * @param  int $page Page to fetch (optional, default to 1)
     * @param  int $perPage Number of items per page, values up to 100 supported (optional, default to 10)
     *
     * @throws \Vertaislaina\Maventa\AutoXChange\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Vertaislaina\Maventa\AutoXChange\Entity\Invoice[]
     */
    public function getV1Invoices($direction = 'RECEIVED', $status = null, $ids = null, $number = null, $reference = null, $receivedAtStart = null, $receivedAtEnd = null, $createdAtStart = null, $createdAtEnd = null, $sort = null, $page = '1', $perPage = '10')
    {
        list($response) = $this->getV1InvoicesWithHttpInfo($direction, $status, $ids, $number, $reference, $receivedAtStart, $receivedAtEnd, $createdAtStart, $createdAtEnd, $sort, $page, $perPage);
        return $response;
    }

    /**
     * Operation getV1InvoicesWithHttpInfo
     *
     * List invoices
     *
     * @param  string $direction Received or sent invoices (optional, default to RECEIVED)
     * @param  string[] $status Invoice status (optional)
     * @param  string[] $ids Batch of invoice IDs. Maximum of 100 per query (optional)
     * @param  string $number Invoice number (optional)
     * @param  string $reference Invoice reference (optional)
     * @param  \DateTime $receivedAtStart Received at start timestamp (optional)
     * @param  \DateTime $receivedAtEnd Received at end timestamp (optional)
     * @param  \DateTime $createdAtStart Created at start timestamp (optional)
     * @param  \DateTime $createdAtEnd Created at end timestamp (optional)
     * @param  string[] $sort List of fields used for sorting.   Ascending by default, include \&quot;-\&quot; before the field name to reverse the order (descending).   Supported values: **received_at**   E.g. -received_at (optional)
     * @param  int $page Page to fetch (optional, default to 1)
     * @param  int $perPage Number of items per page, values up to 100 supported (optional, default to 10)
     *
     * @throws \Vertaislaina\Maventa\AutoXChange\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Vertaislaina\Maventa\AutoXChange\Entity\Invoice[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getV1InvoicesWithHttpInfo($direction = 'RECEIVED', $status = null, $ids = null, $number = null, $reference = null, $receivedAtStart = null, $receivedAtEnd = null, $createdAtStart = null, $createdAtEnd = null, $sort = null, $page = '1', $perPage = '10')
    {
        $returnType = '\Vertaislaina\Maventa\AutoXChange\Entity\Invoice[]';
        $request = $this->getV1InvoicesRequest($direction, $status, $ids, $number, $reference, $receivedAtStart, $receivedAtEnd, $createdAtStart, $createdAtEnd, $sort, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Vertaislaina\Maventa\AutoXChange\Entity\Invoice[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getV1InvoicesAsync
     *
     * List invoices
     *
     * @param  string $direction Received or sent invoices (optional, default to RECEIVED)
     * @param  string[] $status Invoice status (optional)
     * @param  string[] $ids Batch of invoice IDs. Maximum of 100 per query (optional)
     * @param  string $number Invoice number (optional)
     * @param  string $reference Invoice reference (optional)
     * @param  \DateTime $receivedAtStart Received at start timestamp (optional)
     * @param  \DateTime $receivedAtEnd Received at end timestamp (optional)
     * @param  \DateTime $createdAtStart Created at start timestamp (optional)
     * @param  \DateTime $createdAtEnd Created at end timestamp (optional)
     * @param  string[] $sort List of fields used for sorting.   Ascending by default, include \&quot;-\&quot; before the field name to reverse the order (descending).   Supported values: **received_at**   E.g. -received_at (optional)
     * @param  int $page Page to fetch (optional, default to 1)
     * @param  int $perPage Number of items per page, values up to 100 supported (optional, default to 10)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV1InvoicesAsync($direction = 'RECEIVED', $status = null, $ids = null, $number = null, $reference = null, $receivedAtStart = null, $receivedAtEnd = null, $createdAtStart = null, $createdAtEnd = null, $sort = null, $page = '1', $perPage = '10')
    {
        return $this->getV1InvoicesAsyncWithHttpInfo($direction, $status, $ids, $number, $reference, $receivedAtStart, $receivedAtEnd, $createdAtStart, $createdAtEnd, $sort, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getV1InvoicesAsyncWithHttpInfo
     *
     * List invoices
     *
     * @param  string $direction Received or sent invoices (optional, default to RECEIVED)
     * @param  string[] $status Invoice status (optional)
     * @param  string[] $ids Batch of invoice IDs. Maximum of 100 per query (optional)
     * @param  string $number Invoice number (optional)
     * @param  string $reference Invoice reference (optional)
     * @param  \DateTime $receivedAtStart Received at start timestamp (optional)
     * @param  \DateTime $receivedAtEnd Received at end timestamp (optional)
     * @param  \DateTime $createdAtStart Created at start timestamp (optional)
     * @param  \DateTime $createdAtEnd Created at end timestamp (optional)
     * @param  string[] $sort List of fields used for sorting.   Ascending by default, include \&quot;-\&quot; before the field name to reverse the order (descending).   Supported values: **received_at**   E.g. -received_at (optional)
     * @param  int $page Page to fetch (optional, default to 1)
     * @param  int $perPage Number of items per page, values up to 100 supported (optional, default to 10)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV1InvoicesAsyncWithHttpInfo($direction = 'RECEIVED', $status = null, $ids = null, $number = null, $reference = null, $receivedAtStart = null, $receivedAtEnd = null, $createdAtStart = null, $createdAtEnd = null, $sort = null, $page = '1', $perPage = '10')
    {
        $returnType = '\Vertaislaina\Maventa\AutoXChange\Entity\Invoice[]';
        $request = $this->getV1InvoicesRequest($direction, $status, $ids, $number, $reference, $receivedAtStart, $receivedAtEnd, $createdAtStart, $createdAtEnd, $sort, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getV1Invoices'
     *
     * @param  string $direction Received or sent invoices (optional, default to RECEIVED)
     * @param  string[] $status Invoice status (optional)
     * @param  string[] $ids Batch of invoice IDs. Maximum of 100 per query (optional)
     * @param  string $number Invoice number (optional)
     * @param  string $reference Invoice reference (optional)
     * @param  \DateTime $receivedAtStart Received at start timestamp (optional)
     * @param  \DateTime $receivedAtEnd Received at end timestamp (optional)
     * @param  \DateTime $createdAtStart Created at start timestamp (optional)
     * @param  \DateTime $createdAtEnd Created at end timestamp (optional)
     * @param  string[] $sort List of fields used for sorting.   Ascending by default, include \&quot;-\&quot; before the field name to reverse the order (descending).   Supported values: **received_at**   E.g. -received_at (optional)
     * @param  int $page Page to fetch (optional, default to 1)
     * @param  int $perPage Number of items per page, values up to 100 supported (optional, default to 10)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getV1InvoicesRequest($direction = 'RECEIVED', $status = null, $ids = null, $number = null, $reference = null, $receivedAtStart = null, $receivedAtEnd = null, $createdAtStart = null, $createdAtEnd = null, $sort = null, $page = '1', $perPage = '10')
    {

        $resourcePath = '/v1/invoices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($direction !== null) {
            $queryParams['direction'] = ObjectSerializer::toQueryValue($direction);
        }
        // query params
        if (is_array($status)) {
            $queryParams['status'] = $status;
        } else
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if (is_array($ids)) {
            $queryParams['ids'] = $ids;
        } else
        if ($ids !== null) {
            $queryParams['ids'] = ObjectSerializer::toQueryValue($ids);
        }
        // query params
        if ($number !== null) {
            $queryParams['number'] = ObjectSerializer::toQueryValue($number);
        }
        // query params
        if ($reference !== null) {
            $queryParams['reference'] = ObjectSerializer::toQueryValue($reference);
        }
        // query params
        if ($receivedAtStart !== null) {
            $queryParams['received_at_start'] = ObjectSerializer::toQueryValue($receivedAtStart);
        }
        // query params
        if ($receivedAtEnd !== null) {
            $queryParams['received_at_end'] = ObjectSerializer::toQueryValue($receivedAtEnd);
        }
        // query params
        if ($createdAtStart !== null) {
            $queryParams['created_at_start'] = ObjectSerializer::toQueryValue($createdAtStart);
        }
        // query params
        if ($createdAtEnd !== null) {
            $queryParams['created_at_end'] = ObjectSerializer::toQueryValue($createdAtEnd);
        }
        // query params
        if (is_array($sort)) {
            $queryParams['sort'] = $sort;
        } else
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getV1InvoicesId
     *
     * Invoice details
     *
     * @param  string $id Invoice ID (required)
     * @param  string $returnFormat Desired format (optional)
     *
     * @throws \Vertaislaina\Maventa\AutoXChange\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Vertaislaina\Maventa\AutoXChange\Entity\Invoice
     */
    public function getV1InvoicesId($id, $returnFormat = null)
    {
        list($response) = $this->getV1InvoicesIdWithHttpInfo($id, $returnFormat);
        return $response;
    }

    /**
     * Operation getV1InvoicesIdWithHttpInfo
     *
     * Invoice details
     *
     * @param  string $id Invoice ID (required)
     * @param  string $returnFormat Desired format (optional)
     *
     * @throws \Vertaislaina\Maventa\AutoXChange\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Vertaislaina\Maventa\AutoXChange\Entity\Invoice, HTTP status code, HTTP response headers (array of strings)
     */
    public function getV1InvoicesIdWithHttpInfo($id, $returnFormat = null)
    {
        $returnType = '\Vertaislaina\Maventa\AutoXChange\Entity\Invoice';
        $request = $this->getV1InvoicesIdRequest($id, $returnFormat);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Vertaislaina\Maventa\AutoXChange\Entity\Invoice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getV1InvoicesIdAsync
     *
     * Invoice details
     *
     * @param  string $id Invoice ID (required)
     * @param  string $returnFormat Desired format (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV1InvoicesIdAsync($id, $returnFormat = null)
    {
        return $this->getV1InvoicesIdAsyncWithHttpInfo($id, $returnFormat)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getV1InvoicesIdAsyncWithHttpInfo
     *
     * Invoice details
     *
     * @param  string $id Invoice ID (required)
     * @param  string $returnFormat Desired format (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV1InvoicesIdAsyncWithHttpInfo($id, $returnFormat = null)
    {
        $returnType = '\Vertaislaina\Maventa\AutoXChange\Entity\Invoice';
        $request = $this->getV1InvoicesIdRequest($id, $returnFormat);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getV1InvoicesId'
     *
     * @param  string $id Invoice ID (required)
     * @param  string $returnFormat Desired format (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getV1InvoicesIdRequest($id, $returnFormat = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getV1InvoicesId'
            );
        }

        $resourcePath = '/v1/invoices/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($returnFormat !== null) {
            $queryParams['return_format'] = ObjectSerializer::toQueryValue($returnFormat);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getV1InvoicesIdActions
     *
     * List invoice actions
     *
     * @param  string $id Invoice ID (required)
     * @param  string[] $type Action type (optional)
     *
     * @throws \Vertaislaina\Maventa\AutoXChange\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Vertaislaina\Maventa\AutoXChange\Entity\InvoiceAction[]
     */
    public function getV1InvoicesIdActions($id, $type = null)
    {
        list($response) = $this->getV1InvoicesIdActionsWithHttpInfo($id, $type);
        return $response;
    }

    /**
     * Operation getV1InvoicesIdActionsWithHttpInfo
     *
     * List invoice actions
     *
     * @param  string $id Invoice ID (required)
     * @param  string[] $type Action type (optional)
     *
     * @throws \Vertaislaina\Maventa\AutoXChange\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Vertaislaina\Maventa\AutoXChange\Entity\InvoiceAction[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getV1InvoicesIdActionsWithHttpInfo($id, $type = null)
    {
        $returnType = '\Vertaislaina\Maventa\AutoXChange\Entity\InvoiceAction[]';
        $request = $this->getV1InvoicesIdActionsRequest($id, $type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Vertaislaina\Maventa\AutoXChange\Entity\InvoiceAction[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getV1InvoicesIdActionsAsync
     *
     * List invoice actions
     *
     * @param  string $id Invoice ID (required)
     * @param  string[] $type Action type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV1InvoicesIdActionsAsync($id, $type = null)
    {
        return $this->getV1InvoicesIdActionsAsyncWithHttpInfo($id, $type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getV1InvoicesIdActionsAsyncWithHttpInfo
     *
     * List invoice actions
     *
     * @param  string $id Invoice ID (required)
     * @param  string[] $type Action type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV1InvoicesIdActionsAsyncWithHttpInfo($id, $type = null)
    {
        $returnType = '\Vertaislaina\Maventa\AutoXChange\Entity\InvoiceAction[]';
        $request = $this->getV1InvoicesIdActionsRequest($id, $type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getV1InvoicesIdActions'
     *
     * @param  string $id Invoice ID (required)
     * @param  string[] $type Action type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getV1InvoicesIdActionsRequest($id, $type = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getV1InvoicesIdActions'
            );
        }

        $resourcePath = '/v1/invoices/{id}/actions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($type)) {
            $queryParams['type'] = $type;
        } else
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getV1InvoicesIdFilesFileId
     *
     * Fetch file content
     *
     * @param  string $id Invoice ID (required)
     * @param  string $fileId Invoice file ID (required)
     *
     * @throws \Vertaislaina\Maventa\AutoXChange\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getV1InvoicesIdFilesFileId($id, $fileId)
    {
        $this->getV1InvoicesIdFilesFileIdWithHttpInfo($id, $fileId);
    }

    /**
     * Operation getV1InvoicesIdFilesFileIdWithHttpInfo
     *
     * Fetch file content
     *
     * @param  string $id Invoice ID (required)
     * @param  string $fileId Invoice file ID (required)
     *
     * @throws \Vertaislaina\Maventa\AutoXChange\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getV1InvoicesIdFilesFileIdWithHttpInfo($id, $fileId)
    {
        $returnType = '';
        $request = $this->getV1InvoicesIdFilesFileIdRequest($id, $fileId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getV1InvoicesIdFilesFileIdAsync
     *
     * Fetch file content
     *
     * @param  string $id Invoice ID (required)
     * @param  string $fileId Invoice file ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV1InvoicesIdFilesFileIdAsync($id, $fileId)
    {
        return $this->getV1InvoicesIdFilesFileIdAsyncWithHttpInfo($id, $fileId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getV1InvoicesIdFilesFileIdAsyncWithHttpInfo
     *
     * Fetch file content
     *
     * @param  string $id Invoice ID (required)
     * @param  string $fileId Invoice file ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV1InvoicesIdFilesFileIdAsyncWithHttpInfo($id, $fileId)
    {
        $returnType = '';
        $request = $this->getV1InvoicesIdFilesFileIdRequest($id, $fileId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getV1InvoicesIdFilesFileId'
     *
     * @param  string $id Invoice ID (required)
     * @param  string $fileId Invoice file ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getV1InvoicesIdFilesFileIdRequest($id, $fileId)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getV1InvoicesIdFilesFileId'
            );
        }
        // verify the required parameter 'fileId' is set
        if ($fileId === null || (is_array($fileId) && count($fileId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fileId when calling getV1InvoicesIdFilesFileId'
            );
        }

        $resourcePath = '/v1/invoices/{id}/files/{file_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fileId !== null) {
            $resourcePath = str_replace(
                '{' . 'file_id' . '}',
                ObjectSerializer::toPathValue($fileId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getV1InvoicesIdReports
     *
     * @param  string $id Invoice ID (required)
     *
     * @throws \Vertaislaina\Maventa\AutoXChange\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Vertaislaina\Maventa\AutoXChange\Entity\UserReport[]
     */
    public function getV1InvoicesIdReports($id)
    {
        list($response) = $this->getV1InvoicesIdReportsWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getV1InvoicesIdReportsWithHttpInfo
     *
     * @param  string $id Invoice ID (required)
     *
     * @throws \Vertaislaina\Maventa\AutoXChange\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Vertaislaina\Maventa\AutoXChange\Entity\UserReport[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getV1InvoicesIdReportsWithHttpInfo($id)
    {
        $returnType = '\Vertaislaina\Maventa\AutoXChange\Entity\UserReport[]';
        $request = $this->getV1InvoicesIdReportsRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Vertaislaina\Maventa\AutoXChange\Entity\UserReport[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Vertaislaina\Maventa\AutoXChange\Entity\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Vertaislaina\Maventa\AutoXChange\Entity\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Vertaislaina\Maventa\AutoXChange\Entity\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Vertaislaina\Maventa\AutoXChange\Entity\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getV1InvoicesIdReportsAsync
     *
     * 
     *
     * @param  string $id Invoice ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV1InvoicesIdReportsAsync($id)
    {
        return $this->getV1InvoicesIdReportsAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getV1InvoicesIdReportsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id Invoice ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV1InvoicesIdReportsAsyncWithHttpInfo($id)
    {
        $returnType = '\Vertaislaina\Maventa\AutoXChange\Entity\UserReport[]';
        $request = $this->getV1InvoicesIdReportsRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getV1InvoicesIdReports'
     *
     * @param  string $id Invoice ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getV1InvoicesIdReportsRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getV1InvoicesIdReports'
            );
        }

        $resourcePath = '/v1/invoices/{id}/reports';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postV1Invoices
     *
     * Upload new invoice
     *
     * @param  \SplFileObject $file File content (required)
     * @param  string $format File format (optional)
     * @param  string $recipientType Only in Norway, set to \&quot;consumer\&quot; to use route_order (optional, default to b2b)
     * @param  string $recipientEia Recipient EIA (optional)
     * @param  string $recipientEmail Recipient email address (optional)
     * @param  string $recipientOperator Recipient operator (optional)
     * @param  string[] $disabledRoutes Routes to explicitly disable (optional)
     * @param  string $senderComment Text that will be added in the email message if invoice is delivered by email (optional)
     * @param  string[] $routeOrder Consumer routes to use. Leave empty to use default (optional)
     * @param  string $recipientPhoneNumber Recipient phone number in international format. Used in Yes2All lookups. (optional)
     * @param  \DateTime $recipientDateOfBirth Recipient date of birth in YYYY-MM-DD format. Used in Yes2All lookups. (optional)
     * @param  string $recipientEfakturaId Recipient unique eFaktura ID (optional)
     * @param  string $b2cnoDocumentType B2C document type for special documents (optional)
     *
     * @throws \Vertaislaina\Maventa\AutoXChange\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Vertaislaina\Maventa\AutoXChange\Entity\Invoice
     */
    public function postV1Invoices($file, $format = null, $recipientType = 'b2b', $recipientEia = null, $recipientEmail = null, $recipientOperator = null, $disabledRoutes = null, $senderComment = null, $routeOrder = null, $recipientPhoneNumber = null, $recipientDateOfBirth = null, $recipientEfakturaId = null, $b2cnoDocumentType = null)
    {
        list($response) = $this->postV1InvoicesWithHttpInfo($file, $format, $recipientType, $recipientEia, $recipientEmail, $recipientOperator, $disabledRoutes, $senderComment, $routeOrder, $recipientPhoneNumber, $recipientDateOfBirth, $recipientEfakturaId, $b2cnoDocumentType);
        return $response;
    }

    /**
     * Operation postV1InvoicesWithHttpInfo
     *
     * Upload new invoice
     *
     * @param  \SplFileObject $file File content (required)
     * @param  string $format File format (optional)
     * @param  string $recipientType Only in Norway, set to \&quot;consumer\&quot; to use route_order (optional, default to b2b)
     * @param  string $recipientEia Recipient EIA (optional)
     * @param  string $recipientEmail Recipient email address (optional)
     * @param  string $recipientOperator Recipient operator (optional)
     * @param  string[] $disabledRoutes Routes to explicitly disable (optional)
     * @param  string $senderComment Text that will be added in the email message if invoice is delivered by email (optional)
     * @param  string[] $routeOrder Consumer routes to use. Leave empty to use default (optional)
     * @param  string $recipientPhoneNumber Recipient phone number in international format. Used in Yes2All lookups. (optional)
     * @param  \DateTime $recipientDateOfBirth Recipient date of birth in YYYY-MM-DD format. Used in Yes2All lookups. (optional)
     * @param  string $recipientEfakturaId Recipient unique eFaktura ID (optional)
     * @param  string $b2cnoDocumentType B2C document type for special documents (optional)
     *
     * @throws \Vertaislaina\Maventa\AutoXChange\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Vertaislaina\Maventa\AutoXChange\Entity\Invoice, HTTP status code, HTTP response headers (array of strings)
     */
    public function postV1InvoicesWithHttpInfo($file, $format = null, $recipientType = 'b2b', $recipientEia = null, $recipientEmail = null, $recipientOperator = null, $disabledRoutes = null, $senderComment = null, $routeOrder = null, $recipientPhoneNumber = null, $recipientDateOfBirth = null, $recipientEfakturaId = null, $b2cnoDocumentType = null)
    {
        $returnType = '\Vertaislaina\Maventa\AutoXChange\Entity\Invoice';
        $request = $this->postV1InvoicesRequest($file, $format, $recipientType, $recipientEia, $recipientEmail, $recipientOperator, $disabledRoutes, $senderComment, $routeOrder, $recipientPhoneNumber, $recipientDateOfBirth, $recipientEfakturaId, $b2cnoDocumentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Vertaislaina\Maventa\AutoXChange\Entity\Invoice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postV1InvoicesAsync
     *
     * Upload new invoice
     *
     * @param  \SplFileObject $file File content (required)
     * @param  string $format File format (optional)
     * @param  string $recipientType Only in Norway, set to \&quot;consumer\&quot; to use route_order (optional, default to b2b)
     * @param  string $recipientEia Recipient EIA (optional)
     * @param  string $recipientEmail Recipient email address (optional)
     * @param  string $recipientOperator Recipient operator (optional)
     * @param  string[] $disabledRoutes Routes to explicitly disable (optional)
     * @param  string $senderComment Text that will be added in the email message if invoice is delivered by email (optional)
     * @param  string[] $routeOrder Consumer routes to use. Leave empty to use default (optional)
     * @param  string $recipientPhoneNumber Recipient phone number in international format. Used in Yes2All lookups. (optional)
     * @param  \DateTime $recipientDateOfBirth Recipient date of birth in YYYY-MM-DD format. Used in Yes2All lookups. (optional)
     * @param  string $recipientEfakturaId Recipient unique eFaktura ID (optional)
     * @param  string $b2cnoDocumentType B2C document type for special documents (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postV1InvoicesAsync($file, $format = null, $recipientType = 'b2b', $recipientEia = null, $recipientEmail = null, $recipientOperator = null, $disabledRoutes = null, $senderComment = null, $routeOrder = null, $recipientPhoneNumber = null, $recipientDateOfBirth = null, $recipientEfakturaId = null, $b2cnoDocumentType = null)
    {
        return $this->postV1InvoicesAsyncWithHttpInfo($file, $format, $recipientType, $recipientEia, $recipientEmail, $recipientOperator, $disabledRoutes, $senderComment, $routeOrder, $recipientPhoneNumber, $recipientDateOfBirth, $recipientEfakturaId, $b2cnoDocumentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postV1InvoicesAsyncWithHttpInfo
     *
     * Upload new invoice
     *
     * @param  \SplFileObject $file File content (required)
     * @param  string $format File format (optional)
     * @param  string $recipientType Only in Norway, set to \&quot;consumer\&quot; to use route_order (optional, default to b2b)
     * @param  string $recipientEia Recipient EIA (optional)
     * @param  string $recipientEmail Recipient email address (optional)
     * @param  string $recipientOperator Recipient operator (optional)
     * @param  string[] $disabledRoutes Routes to explicitly disable (optional)
     * @param  string $senderComment Text that will be added in the email message if invoice is delivered by email (optional)
     * @param  string[] $routeOrder Consumer routes to use. Leave empty to use default (optional)
     * @param  string $recipientPhoneNumber Recipient phone number in international format. Used in Yes2All lookups. (optional)
     * @param  \DateTime $recipientDateOfBirth Recipient date of birth in YYYY-MM-DD format. Used in Yes2All lookups. (optional)
     * @param  string $recipientEfakturaId Recipient unique eFaktura ID (optional)
     * @param  string $b2cnoDocumentType B2C document type for special documents (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postV1InvoicesAsyncWithHttpInfo($file, $format = null, $recipientType = 'b2b', $recipientEia = null, $recipientEmail = null, $recipientOperator = null, $disabledRoutes = null, $senderComment = null, $routeOrder = null, $recipientPhoneNumber = null, $recipientDateOfBirth = null, $recipientEfakturaId = null, $b2cnoDocumentType = null)
    {
        $returnType = '\Vertaislaina\Maventa\AutoXChange\Entity\Invoice';
        $request = $this->postV1InvoicesRequest($file, $format, $recipientType, $recipientEia, $recipientEmail, $recipientOperator, $disabledRoutes, $senderComment, $routeOrder, $recipientPhoneNumber, $recipientDateOfBirth, $recipientEfakturaId, $b2cnoDocumentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postV1Invoices'
     *
     * @param  \SplFileObject $file File content (required)
     * @param  string $format File format (optional)
     * @param  string $recipientType Only in Norway, set to \&quot;consumer\&quot; to use route_order (optional, default to b2b)
     * @param  string $recipientEia Recipient EIA (optional)
     * @param  string $recipientEmail Recipient email address (optional)
     * @param  string $recipientOperator Recipient operator (optional)
     * @param  string[] $disabledRoutes Routes to explicitly disable (optional)
     * @param  string $senderComment Text that will be added in the email message if invoice is delivered by email (optional)
     * @param  string[] $routeOrder Consumer routes to use. Leave empty to use default (optional)
     * @param  string $recipientPhoneNumber Recipient phone number in international format. Used in Yes2All lookups. (optional)
     * @param  \DateTime $recipientDateOfBirth Recipient date of birth in YYYY-MM-DD format. Used in Yes2All lookups. (optional)
     * @param  string $recipientEfakturaId Recipient unique eFaktura ID (optional)
     * @param  string $b2cnoDocumentType B2C document type for special documents (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postV1InvoicesRequest($file, $format = null, $recipientType = 'b2b', $recipientEia = null, $recipientEmail = null, $recipientOperator = null, $disabledRoutes = null, $senderComment = null, $routeOrder = null, $recipientPhoneNumber = null, $recipientDateOfBirth = null, $recipientEfakturaId = null, $b2cnoDocumentType = null)
    {
        // verify the required parameter 'file' is set
        if ($file === null || (is_array($file) && count($file) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file when calling postV1Invoices'
            );
        }

        $resourcePath = '/v1/invoices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($file !== null) {
            $multipart = true;
            $formParams['file'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($file), 'rb');
        }
        // form params
        if ($format !== null) {
            $formParams['format'] = ObjectSerializer::toFormValue($format);
        }
        // form params
        if ($recipientType !== null) {
            $formParams['recipient_type'] = ObjectSerializer::toFormValue($recipientType);
        }
        // form params
        if ($recipientEia !== null) {
            $formParams['recipient_eia'] = ObjectSerializer::toFormValue($recipientEia);
        }
        // form params
        if ($recipientEmail !== null) {
            $formParams['recipient_email'] = ObjectSerializer::toFormValue($recipientEmail);
        }
        // form params
        if ($recipientOperator !== null) {
            $formParams['recipient_operator'] = ObjectSerializer::toFormValue($recipientOperator);
        }
        // form params
        if ($disabledRoutes !== null) {
            $formParams['disabled_routes'] = ObjectSerializer::toFormValue($disabledRoutes);
        }
        // form params
        if ($senderComment !== null) {
            $formParams['sender_comment'] = ObjectSerializer::toFormValue($senderComment);
        }
        // form params
        if ($routeOrder !== null) {
            $formParams['route_order'] = ObjectSerializer::toFormValue($routeOrder);
        }
        // form params
        if ($recipientPhoneNumber !== null) {
            $formParams['recipient_phone_number'] = ObjectSerializer::toFormValue($recipientPhoneNumber);
        }
        // form params
        if ($recipientDateOfBirth !== null) {
            $formParams['recipient_date_of_birth'] = ObjectSerializer::toFormValue($recipientDateOfBirth);
        }
        // form params
        if ($recipientEfakturaId !== null) {
            $formParams['recipient_efaktura_id'] = ObjectSerializer::toFormValue($recipientEfakturaId);
        }
        // form params
        if ($b2cnoDocumentType !== null) {
            $formParams['b2cno_document_type'] = ObjectSerializer::toFormValue($b2cnoDocumentType);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postV1InvoicesIdReports
     *
     * @param  string $id Invoice ID (required)
     * @param  \Vertaislaina\Maventa\AutoXChange\Entity\PostV1InvoicesIdReports $v1InvoicesIdReports v1InvoicesIdReports (required)
     *
     * @throws \Vertaislaina\Maventa\AutoXChange\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postV1InvoicesIdReports($id, $v1InvoicesIdReports)
    {
        $this->postV1InvoicesIdReportsWithHttpInfo($id, $v1InvoicesIdReports);
    }

    /**
     * Operation postV1InvoicesIdReportsWithHttpInfo
     *
     * @param  string $id Invoice ID (required)
     * @param  \Vertaislaina\Maventa\AutoXChange\Entity\PostV1InvoicesIdReports $v1InvoicesIdReports (required)
     *
     * @throws \Vertaislaina\Maventa\AutoXChange\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postV1InvoicesIdReportsWithHttpInfo($id, $v1InvoicesIdReports)
    {
        $returnType = '';
        $request = $this->postV1InvoicesIdReportsRequest($id, $v1InvoicesIdReports);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Vertaislaina\Maventa\AutoXChange\Entity\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Vertaislaina\Maventa\AutoXChange\Entity\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Vertaislaina\Maventa\AutoXChange\Entity\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Vertaislaina\Maventa\AutoXChange\Entity\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postV1InvoicesIdReportsAsync
     *
     * 
     *
     * @param  string $id Invoice ID (required)
     * @param  \Vertaislaina\Maventa\AutoXChange\Entity\PostV1InvoicesIdReports $v1InvoicesIdReports (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postV1InvoicesIdReportsAsync($id, $v1InvoicesIdReports)
    {
        return $this->postV1InvoicesIdReportsAsyncWithHttpInfo($id, $v1InvoicesIdReports)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postV1InvoicesIdReportsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id Invoice ID (required)
     * @param  \Vertaislaina\Maventa\AutoXChange\Entity\PostV1InvoicesIdReports $v1InvoicesIdReports (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postV1InvoicesIdReportsAsyncWithHttpInfo($id, $v1InvoicesIdReports)
    {
        $returnType = '';
        $request = $this->postV1InvoicesIdReportsRequest($id, $v1InvoicesIdReports);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postV1InvoicesIdReports'
     *
     * @param  string $id Invoice ID (required)
     * @param  \Vertaislaina\Maventa\AutoXChange\Entity\PostV1InvoicesIdReports $v1InvoicesIdReports (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postV1InvoicesIdReportsRequest($id, $v1InvoicesIdReports)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling postV1InvoicesIdReports'
            );
        }
        // verify the required parameter 'v1InvoicesIdReports' is set
        if ($v1InvoicesIdReports === null || (is_array($v1InvoicesIdReports) && count($v1InvoicesIdReports) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $v1InvoicesIdReports when calling postV1InvoicesIdReports'
            );
        }

        $resourcePath = '/v1/invoices/{id}/reports';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($v1InvoicesIdReports)) {
            $_tempBody = $v1InvoicesIdReports;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putV1InvoicesIdRerouteEinvoice
     *
     * @param  string $id Invoice ID (required)
     * @param  \Vertaislaina\Maventa\AutoXChange\Entity\PutV1InvoicesIdRerouteEinvoice $v1InvoicesIdRerouteEinvoice v1InvoicesIdRerouteEinvoice (required)
     *
     * @throws \Vertaislaina\Maventa\AutoXChange\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function putV1InvoicesIdRerouteEinvoice($id, $v1InvoicesIdRerouteEinvoice)
    {
        $this->putV1InvoicesIdRerouteEinvoiceWithHttpInfo($id, $v1InvoicesIdRerouteEinvoice);
    }

    /**
     * Operation putV1InvoicesIdRerouteEinvoiceWithHttpInfo
     *
     * @param  string $id Invoice ID (required)
     * @param  \Vertaislaina\Maventa\AutoXChange\Entity\PutV1InvoicesIdRerouteEinvoice $v1InvoicesIdRerouteEinvoice (required)
     *
     * @throws \Vertaislaina\Maventa\AutoXChange\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function putV1InvoicesIdRerouteEinvoiceWithHttpInfo($id, $v1InvoicesIdRerouteEinvoice)
    {
        $returnType = '';
        $request = $this->putV1InvoicesIdRerouteEinvoiceRequest($id, $v1InvoicesIdRerouteEinvoice);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation putV1InvoicesIdRerouteEinvoiceAsync
     *
     * 
     *
     * @param  string $id Invoice ID (required)
     * @param  \Vertaislaina\Maventa\AutoXChange\Entity\PutV1InvoicesIdRerouteEinvoice $v1InvoicesIdRerouteEinvoice (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putV1InvoicesIdRerouteEinvoiceAsync($id, $v1InvoicesIdRerouteEinvoice)
    {
        return $this->putV1InvoicesIdRerouteEinvoiceAsyncWithHttpInfo($id, $v1InvoicesIdRerouteEinvoice)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putV1InvoicesIdRerouteEinvoiceAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id Invoice ID (required)
     * @param  \Vertaislaina\Maventa\AutoXChange\Entity\PutV1InvoicesIdRerouteEinvoice $v1InvoicesIdRerouteEinvoice (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putV1InvoicesIdRerouteEinvoiceAsyncWithHttpInfo($id, $v1InvoicesIdRerouteEinvoice)
    {
        $returnType = '';
        $request = $this->putV1InvoicesIdRerouteEinvoiceRequest($id, $v1InvoicesIdRerouteEinvoice);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putV1InvoicesIdRerouteEinvoice'
     *
     * @param  string $id Invoice ID (required)
     * @param  \Vertaislaina\Maventa\AutoXChange\Entity\PutV1InvoicesIdRerouteEinvoice $v1InvoicesIdRerouteEinvoice (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putV1InvoicesIdRerouteEinvoiceRequest($id, $v1InvoicesIdRerouteEinvoice)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling putV1InvoicesIdRerouteEinvoice'
            );
        }
        // verify the required parameter 'v1InvoicesIdRerouteEinvoice' is set
        if ($v1InvoicesIdRerouteEinvoice === null || (is_array($v1InvoicesIdRerouteEinvoice) && count($v1InvoicesIdRerouteEinvoice) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $v1InvoicesIdRerouteEinvoice when calling putV1InvoicesIdRerouteEinvoice'
            );
        }

        $resourcePath = '/v1/invoices/{id}/reroute/einvoice';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($v1InvoicesIdRerouteEinvoice)) {
            $_tempBody = $v1InvoicesIdRerouteEinvoice;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putV1InvoicesIdRerouteEmail
     *
     * @param  string $id Invoice ID (required)
     * @param  \Vertaislaina\Maventa\AutoXChange\Entity\PutV1InvoicesIdRerouteEmail $v1InvoicesIdRerouteEmail v1InvoicesIdRerouteEmail (required)
     *
     * @throws \Vertaislaina\Maventa\AutoXChange\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function putV1InvoicesIdRerouteEmail($id, $v1InvoicesIdRerouteEmail)
    {
        $this->putV1InvoicesIdRerouteEmailWithHttpInfo($id, $v1InvoicesIdRerouteEmail);
    }

    /**
     * Operation putV1InvoicesIdRerouteEmailWithHttpInfo
     *
     * @param  string $id Invoice ID (required)
     * @param  \Vertaislaina\Maventa\AutoXChange\Entity\PutV1InvoicesIdRerouteEmail $v1InvoicesIdRerouteEmail (required)
     *
     * @throws \Vertaislaina\Maventa\AutoXChange\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function putV1InvoicesIdRerouteEmailWithHttpInfo($id, $v1InvoicesIdRerouteEmail)
    {
        $returnType = '';
        $request = $this->putV1InvoicesIdRerouteEmailRequest($id, $v1InvoicesIdRerouteEmail);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation putV1InvoicesIdRerouteEmailAsync
     *
     * 
     *
     * @param  string $id Invoice ID (required)
     * @param  \Vertaislaina\Maventa\AutoXChange\Entity\PutV1InvoicesIdRerouteEmail $v1InvoicesIdRerouteEmail (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putV1InvoicesIdRerouteEmailAsync($id, $v1InvoicesIdRerouteEmail)
    {
        return $this->putV1InvoicesIdRerouteEmailAsyncWithHttpInfo($id, $v1InvoicesIdRerouteEmail)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putV1InvoicesIdRerouteEmailAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id Invoice ID (required)
     * @param  \Vertaislaina\Maventa\AutoXChange\Entity\PutV1InvoicesIdRerouteEmail $v1InvoicesIdRerouteEmail (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putV1InvoicesIdRerouteEmailAsyncWithHttpInfo($id, $v1InvoicesIdRerouteEmail)
    {
        $returnType = '';
        $request = $this->putV1InvoicesIdRerouteEmailRequest($id, $v1InvoicesIdRerouteEmail);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putV1InvoicesIdRerouteEmail'
     *
     * @param  string $id Invoice ID (required)
     * @param  \Vertaislaina\Maventa\AutoXChange\Entity\PutV1InvoicesIdRerouteEmail $v1InvoicesIdRerouteEmail (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putV1InvoicesIdRerouteEmailRequest($id, $v1InvoicesIdRerouteEmail)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling putV1InvoicesIdRerouteEmail'
            );
        }
        // verify the required parameter 'v1InvoicesIdRerouteEmail' is set
        if ($v1InvoicesIdRerouteEmail === null || (is_array($v1InvoicesIdRerouteEmail) && count($v1InvoicesIdRerouteEmail) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $v1InvoicesIdRerouteEmail when calling putV1InvoicesIdRerouteEmail'
            );
        }

        $resourcePath = '/v1/invoices/{id}/reroute/email';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($v1InvoicesIdRerouteEmail)) {
            $_tempBody = $v1InvoicesIdRerouteEmail;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putV1InvoicesIdReroutePrint
     *
     * @param  string $id Invoice ID (required)
     * @param  \Vertaislaina\Maventa\AutoXChange\Entity\PutV1InvoicesIdReroutePrint $v1InvoicesIdReroutePrint v1InvoicesIdReroutePrint (required)
     *
     * @throws \Vertaislaina\Maventa\AutoXChange\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function putV1InvoicesIdReroutePrint($id, $v1InvoicesIdReroutePrint)
    {
        $this->putV1InvoicesIdReroutePrintWithHttpInfo($id, $v1InvoicesIdReroutePrint);
    }

    /**
     * Operation putV1InvoicesIdReroutePrintWithHttpInfo
     *
     * @param  string $id Invoice ID (required)
     * @param  \Vertaislaina\Maventa\AutoXChange\Entity\PutV1InvoicesIdReroutePrint $v1InvoicesIdReroutePrint (required)
     *
     * @throws \Vertaislaina\Maventa\AutoXChange\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function putV1InvoicesIdReroutePrintWithHttpInfo($id, $v1InvoicesIdReroutePrint)
    {
        $returnType = '';
        $request = $this->putV1InvoicesIdReroutePrintRequest($id, $v1InvoicesIdReroutePrint);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation putV1InvoicesIdReroutePrintAsync
     *
     * 
     *
     * @param  string $id Invoice ID (required)
     * @param  \Vertaislaina\Maventa\AutoXChange\Entity\PutV1InvoicesIdReroutePrint $v1InvoicesIdReroutePrint (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putV1InvoicesIdReroutePrintAsync($id, $v1InvoicesIdReroutePrint)
    {
        return $this->putV1InvoicesIdReroutePrintAsyncWithHttpInfo($id, $v1InvoicesIdReroutePrint)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putV1InvoicesIdReroutePrintAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id Invoice ID (required)
     * @param  \Vertaislaina\Maventa\AutoXChange\Entity\PutV1InvoicesIdReroutePrint $v1InvoicesIdReroutePrint (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putV1InvoicesIdReroutePrintAsyncWithHttpInfo($id, $v1InvoicesIdReroutePrint)
    {
        $returnType = '';
        $request = $this->putV1InvoicesIdReroutePrintRequest($id, $v1InvoicesIdReroutePrint);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putV1InvoicesIdReroutePrint'
     *
     * @param  string $id Invoice ID (required)
     * @param  \Vertaislaina\Maventa\AutoXChange\Entity\PutV1InvoicesIdReroutePrint $v1InvoicesIdReroutePrint (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putV1InvoicesIdReroutePrintRequest($id, $v1InvoicesIdReroutePrint)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling putV1InvoicesIdReroutePrint'
            );
        }
        // verify the required parameter 'v1InvoicesIdReroutePrint' is set
        if ($v1InvoicesIdReroutePrint === null || (is_array($v1InvoicesIdReroutePrint) && count($v1InvoicesIdReroutePrint) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $v1InvoicesIdReroutePrint when calling putV1InvoicesIdReroutePrint'
            );
        }

        $resourcePath = '/v1/invoices/{id}/reroute/print';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($v1InvoicesIdReroutePrint)) {
            $_tempBody = $v1InvoicesIdReroutePrint;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
