<?php
/**
 * LookupApi
 * PHP version 5
 *
 * @category Class
 * @package  Vertaislaina\Maventa\AutoXChange
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AutoXChange API
 *
 * ### Changelog #### 2020-05-29 05:41 UTC id:bc15c059 (0.85.37-bc15c059) - Validate SSNs before calling Vipps and Yes2All lookups - Preserve the scope aliases given in the request  #### 2020-05-27 04:35 UTC id:8ccb6ed2 (0.85.37) - Limit the available scopes for unverified companies  #### 2020-05-22 04:28 UTC id:925897a2 - Load available checks from the Analysis API - List ATG mandates  #### 2020-05-06 09:36 UTC id:3586aec0 - Graceful handling of invalid VAT numbers in supplier activation lookup  #### 2020-05-05 09:16 UTC id:2095eb8b - Only present /v1/invoices sources as INTERNAL, EXTERNAL or SCAN   ### Credentials  The API consumer is authenticated as a company and a user using the Company UUID and the personal User API Key. OAuth2 client_credentials flow is used for authentication, more details about the authentication can be found from the OAuth2 endpoint.  ### Timestamps  Timestamps returned by the API is be presented as UTC and in the ISO8601 format. Timestamps provided in the requests should also be presented in this way.   ``` 2016-09-23T09:09:06Z ```  ### Error handling Errors are presented using the HTTP status codes 400-599. The response include a more detailed explanation about the error in the body.  ``` {   \"code\": \"internal_error_code\",   \"message\": \"Cleartext explanation of the error that occurred\",   \"details\": [     \"More details\",     \"about the error\"   ] } ```  ### Generic API errors These error responses can be returned by any of the described endpoints.  | HTTP status  |  Description | |---|---| | 400| Bad input parameters or invalid request. More information can be found in the response body. | 401| The consumer does not have access to the requested resource or the provided token is not valid. | 404| The requested resource can not be found or the user does not have access to the resource. | 5XX| A server error has occurred while processing the request.
 *
 * OpenAPI spec version: 0.85.52
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.14
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Vertaislaina\Maventa\AutoXChange\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Vertaislaina\Maventa\AutoXChange\ApiException;
use Vertaislaina\Maventa\AutoXChange\Configuration;
use Vertaislaina\Maventa\AutoXChange\HeaderSelector;
use Vertaislaina\Maventa\AutoXChange\ObjectSerializer;

/**
 * LookupApi Class Doc Comment
 *
 * @category Class
 * @package  Vertaislaina\Maventa\AutoXChange
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LookupApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getV1LookupConsumers
     *
     * Lookup for consumer recipients
     *
     * @param  string $ssn Social security number (optional)
     * @param  string $phoneNumber Phone number (optional)
     * @param  string $referenceNumber Reference number for CV registry queries (optional)
     * @param  string[] $routes What registries to check from. Possible values:                                                 cv,yes2all,vipps,dpi (optional)
     *
     * @throws \Vertaislaina\Maventa\AutoXChange\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Vertaislaina\Maventa\AutoXChange\Entity\Consumer
     */
    public function getV1LookupConsumers($ssn = null, $phoneNumber = null, $referenceNumber = null, $routes = null)
    {
        list($response) = $this->getV1LookupConsumersWithHttpInfo($ssn, $phoneNumber, $referenceNumber, $routes);
        return $response;
    }

    /**
     * Operation getV1LookupConsumersWithHttpInfo
     *
     * Lookup for consumer recipients
     *
     * @param  string $ssn Social security number (optional)
     * @param  string $phoneNumber Phone number (optional)
     * @param  string $referenceNumber Reference number for CV registry queries (optional)
     * @param  string[] $routes What registries to check from. Possible values:                                                 cv,yes2all,vipps,dpi (optional)
     *
     * @throws \Vertaislaina\Maventa\AutoXChange\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Vertaislaina\Maventa\AutoXChange\Entity\Consumer, HTTP status code, HTTP response headers (array of strings)
     */
    public function getV1LookupConsumersWithHttpInfo($ssn = null, $phoneNumber = null, $referenceNumber = null, $routes = null)
    {
        $returnType = '\Vertaislaina\Maventa\AutoXChange\Entity\Consumer';
        $request = $this->getV1LookupConsumersRequest($ssn, $phoneNumber, $referenceNumber, $routes);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Vertaislaina\Maventa\AutoXChange\Entity\Consumer',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getV1LookupConsumersAsync
     *
     * Lookup for consumer recipients
     *
     * @param  string $ssn Social security number (optional)
     * @param  string $phoneNumber Phone number (optional)
     * @param  string $referenceNumber Reference number for CV registry queries (optional)
     * @param  string[] $routes What registries to check from. Possible values:                                                 cv,yes2all,vipps,dpi (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV1LookupConsumersAsync($ssn = null, $phoneNumber = null, $referenceNumber = null, $routes = null)
    {
        return $this->getV1LookupConsumersAsyncWithHttpInfo($ssn, $phoneNumber, $referenceNumber, $routes)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getV1LookupConsumersAsyncWithHttpInfo
     *
     * Lookup for consumer recipients
     *
     * @param  string $ssn Social security number (optional)
     * @param  string $phoneNumber Phone number (optional)
     * @param  string $referenceNumber Reference number for CV registry queries (optional)
     * @param  string[] $routes What registries to check from. Possible values:                                                 cv,yes2all,vipps,dpi (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV1LookupConsumersAsyncWithHttpInfo($ssn = null, $phoneNumber = null, $referenceNumber = null, $routes = null)
    {
        $returnType = '\Vertaislaina\Maventa\AutoXChange\Entity\Consumer';
        $request = $this->getV1LookupConsumersRequest($ssn, $phoneNumber, $referenceNumber, $routes);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getV1LookupConsumers'
     *
     * @param  string $ssn Social security number (optional)
     * @param  string $phoneNumber Phone number (optional)
     * @param  string $referenceNumber Reference number for CV registry queries (optional)
     * @param  string[] $routes What registries to check from. Possible values:                                                 cv,yes2all,vipps,dpi (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getV1LookupConsumersRequest($ssn = null, $phoneNumber = null, $referenceNumber = null, $routes = null)
    {

        $resourcePath = '/v1/lookup/consumers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($ssn !== null) {
            $queryParams['ssn'] = ObjectSerializer::toQueryValue($ssn);
        }
        // query params
        if ($phoneNumber !== null) {
            $queryParams['phone_number'] = ObjectSerializer::toQueryValue($phoneNumber);
        }
        // query params
        if ($referenceNumber !== null) {
            $queryParams['reference_number'] = ObjectSerializer::toQueryValue($referenceNumber);
        }
        // query params
        if (is_array($routes)) {
            $queryParams['routes'] = $routes;
        } else
        if ($routes !== null) {
            $queryParams['routes'] = ObjectSerializer::toQueryValue($routes);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getV1LookupEndpoints
     *
     * @param  string[] $businessIds Business ids. Maximum number of bids: 10 (required)
     * @param  string[] $sending Types of documents sent. Possible values: invoice (optional)
     * @param  string $country Country in ISO 3166-1 alpha-2 format (2 letters) (optional)
     *
     * @throws \Vertaislaina\Maventa\AutoXChange\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Vertaislaina\Maventa\AutoXChange\Entity\Endpoint
     */
    public function getV1LookupEndpoints($businessIds, $sending = null, $country = null)
    {
        list($response) = $this->getV1LookupEndpointsWithHttpInfo($businessIds, $sending, $country);
        return $response;
    }

    /**
     * Operation getV1LookupEndpointsWithHttpInfo
     *
     * @param  string[] $businessIds Business ids. Maximum number of bids: 10 (required)
     * @param  string[] $sending Types of documents sent. Possible values: invoice (optional)
     * @param  string $country Country in ISO 3166-1 alpha-2 format (2 letters) (optional)
     *
     * @throws \Vertaislaina\Maventa\AutoXChange\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Vertaislaina\Maventa\AutoXChange\Entity\Endpoint, HTTP status code, HTTP response headers (array of strings)
     */
    public function getV1LookupEndpointsWithHttpInfo($businessIds, $sending = null, $country = null)
    {
        $returnType = '\Vertaislaina\Maventa\AutoXChange\Entity\Endpoint';
        $request = $this->getV1LookupEndpointsRequest($businessIds, $sending, $country);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Vertaislaina\Maventa\AutoXChange\Entity\Endpoint',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getV1LookupEndpointsAsync
     *
     * 
     *
     * @param  string[] $businessIds Business ids. Maximum number of bids: 10 (required)
     * @param  string[] $sending Types of documents sent. Possible values: invoice (optional)
     * @param  string $country Country in ISO 3166-1 alpha-2 format (2 letters) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV1LookupEndpointsAsync($businessIds, $sending = null, $country = null)
    {
        return $this->getV1LookupEndpointsAsyncWithHttpInfo($businessIds, $sending, $country)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getV1LookupEndpointsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string[] $businessIds Business ids. Maximum number of bids: 10 (required)
     * @param  string[] $sending Types of documents sent. Possible values: invoice (optional)
     * @param  string $country Country in ISO 3166-1 alpha-2 format (2 letters) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV1LookupEndpointsAsyncWithHttpInfo($businessIds, $sending = null, $country = null)
    {
        $returnType = '\Vertaislaina\Maventa\AutoXChange\Entity\Endpoint';
        $request = $this->getV1LookupEndpointsRequest($businessIds, $sending, $country);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getV1LookupEndpoints'
     *
     * @param  string[] $businessIds Business ids. Maximum number of bids: 10 (required)
     * @param  string[] $sending Types of documents sent. Possible values: invoice (optional)
     * @param  string $country Country in ISO 3166-1 alpha-2 format (2 letters) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getV1LookupEndpointsRequest($businessIds, $sending = null, $country = null)
    {
        // verify the required parameter 'businessIds' is set
        if ($businessIds === null || (is_array($businessIds) && count($businessIds) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $businessIds when calling getV1LookupEndpoints'
            );
        }

        $resourcePath = '/v1/lookup/endpoints';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($businessIds)) {
            $queryParams['business_ids'] = $businessIds;
        } else
        if ($businessIds !== null) {
            $queryParams['business_ids'] = ObjectSerializer::toQueryValue($businessIds);
        }
        // query params
        if (is_array($sending)) {
            $queryParams['sending'] = $sending;
        } else
        if ($sending !== null) {
            $queryParams['sending'] = ObjectSerializer::toQueryValue($sending);
        }
        // query params
        if ($country !== null) {
            $queryParams['country'] = ObjectSerializer::toQueryValue($country);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getV1LookupReceivers
     *
     * @param  string[] $network Networks to search from eg. PEPPOL, INTERNAL, EXTERNAL (required)
     * @param  string $eia Full Electronic Address eg: 0192:123456789 (optional)
     * @param  string $bid Business identifier (optional)
     * @param  string $name Company name (optional)
     * @param  string[] $country Company country in ISO 3166-1 alpha-2 format (2 letters) (optional)
     * @param  string[] $documentType Document types (optional)
     * @param  int $page Page to fetch (optional, default to 1)
     * @param  int $perPage Number of items per page, values up to 100 supported (optional, default to 100)
     *
     * @throws \Vertaislaina\Maventa\AutoXChange\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Vertaislaina\Maventa\AutoXChange\Entity\LookupEntryReceiver[]
     */
    public function getV1LookupReceivers($network, $eia = null, $bid = null, $name = null, $country = null, $documentType = null, $page = '1', $perPage = '100')
    {
        list($response) = $this->getV1LookupReceiversWithHttpInfo($network, $eia, $bid, $name, $country, $documentType, $page, $perPage);
        return $response;
    }

    /**
     * Operation getV1LookupReceiversWithHttpInfo
     *
     * @param  string[] $network Networks to search from eg. PEPPOL, INTERNAL, EXTERNAL (required)
     * @param  string $eia Full Electronic Address eg: 0192:123456789 (optional)
     * @param  string $bid Business identifier (optional)
     * @param  string $name Company name (optional)
     * @param  string[] $country Company country in ISO 3166-1 alpha-2 format (2 letters) (optional)
     * @param  string[] $documentType Document types (optional)
     * @param  int $page Page to fetch (optional, default to 1)
     * @param  int $perPage Number of items per page, values up to 100 supported (optional, default to 100)
     *
     * @throws \Vertaislaina\Maventa\AutoXChange\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Vertaislaina\Maventa\AutoXChange\Entity\LookupEntryReceiver[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getV1LookupReceiversWithHttpInfo($network, $eia = null, $bid = null, $name = null, $country = null, $documentType = null, $page = '1', $perPage = '100')
    {
        $returnType = '\Vertaislaina\Maventa\AutoXChange\Entity\LookupEntryReceiver[]';
        $request = $this->getV1LookupReceiversRequest($network, $eia, $bid, $name, $country, $documentType, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Vertaislaina\Maventa\AutoXChange\Entity\LookupEntryReceiver[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getV1LookupReceiversAsync
     *
     * 
     *
     * @param  string[] $network Networks to search from eg. PEPPOL, INTERNAL, EXTERNAL (required)
     * @param  string $eia Full Electronic Address eg: 0192:123456789 (optional)
     * @param  string $bid Business identifier (optional)
     * @param  string $name Company name (optional)
     * @param  string[] $country Company country in ISO 3166-1 alpha-2 format (2 letters) (optional)
     * @param  string[] $documentType Document types (optional)
     * @param  int $page Page to fetch (optional, default to 1)
     * @param  int $perPage Number of items per page, values up to 100 supported (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV1LookupReceiversAsync($network, $eia = null, $bid = null, $name = null, $country = null, $documentType = null, $page = '1', $perPage = '100')
    {
        return $this->getV1LookupReceiversAsyncWithHttpInfo($network, $eia, $bid, $name, $country, $documentType, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getV1LookupReceiversAsyncWithHttpInfo
     *
     * 
     *
     * @param  string[] $network Networks to search from eg. PEPPOL, INTERNAL, EXTERNAL (required)
     * @param  string $eia Full Electronic Address eg: 0192:123456789 (optional)
     * @param  string $bid Business identifier (optional)
     * @param  string $name Company name (optional)
     * @param  string[] $country Company country in ISO 3166-1 alpha-2 format (2 letters) (optional)
     * @param  string[] $documentType Document types (optional)
     * @param  int $page Page to fetch (optional, default to 1)
     * @param  int $perPage Number of items per page, values up to 100 supported (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV1LookupReceiversAsyncWithHttpInfo($network, $eia = null, $bid = null, $name = null, $country = null, $documentType = null, $page = '1', $perPage = '100')
    {
        $returnType = '\Vertaislaina\Maventa\AutoXChange\Entity\LookupEntryReceiver[]';
        $request = $this->getV1LookupReceiversRequest($network, $eia, $bid, $name, $country, $documentType, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getV1LookupReceivers'
     *
     * @param  string[] $network Networks to search from eg. PEPPOL, INTERNAL, EXTERNAL (required)
     * @param  string $eia Full Electronic Address eg: 0192:123456789 (optional)
     * @param  string $bid Business identifier (optional)
     * @param  string $name Company name (optional)
     * @param  string[] $country Company country in ISO 3166-1 alpha-2 format (2 letters) (optional)
     * @param  string[] $documentType Document types (optional)
     * @param  int $page Page to fetch (optional, default to 1)
     * @param  int $perPage Number of items per page, values up to 100 supported (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getV1LookupReceiversRequest($network, $eia = null, $bid = null, $name = null, $country = null, $documentType = null, $page = '1', $perPage = '100')
    {
        // verify the required parameter 'network' is set
        if ($network === null || (is_array($network) && count($network) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $network when calling getV1LookupReceivers'
            );
        }

        $resourcePath = '/v1/lookup/receivers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($network)) {
            $queryParams['network'] = $network;
        } else
        if ($network !== null) {
            $queryParams['network'] = ObjectSerializer::toQueryValue($network);
        }
        // query params
        if ($eia !== null) {
            $queryParams['eia'] = ObjectSerializer::toQueryValue($eia);
        }
        // query params
        if ($bid !== null) {
            $queryParams['bid'] = ObjectSerializer::toQueryValue($bid);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if (is_array($country)) {
            $queryParams['country'] = $country;
        } else
        if ($country !== null) {
            $queryParams['country'] = ObjectSerializer::toQueryValue($country);
        }
        // query params
        if (is_array($documentType)) {
            $queryParams['document_type'] = $documentType;
        } else
        if ($documentType !== null) {
            $queryParams['document_type'] = ObjectSerializer::toQueryValue($documentType);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
