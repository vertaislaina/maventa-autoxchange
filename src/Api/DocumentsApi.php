<?php
/**
 * DocumentsApi
 * PHP version 5
 *
 * @category Class
 * @package  Vertaislaina\Maventa\AutoXChange
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AutoXChange API
 *
 * ### Changelog #### 2020-10-22 11:16 UTC id:a2f621ff (0.85.74)  #### 2020-10-21 08:44 UTC id:1ebcfa21 (0.85.73) - Create and associate a AutoInvoice user to a ODP user for better compatibility  #### 2020-10-15 11:32 UTC id:373f35ed (0.85.72) - Do not create billing action for transactions made by operators  #### 2020-10-13 17:45 UTC id:d3c2849d (0.85.71) - Support incoming scan documents  #### 2020-10-05 06:57 UTC id:c0721097 (0.85.70) - Fix for BUB-1477   ### Credentials  The API consumer is authenticated as a company and a user using the Company UUID and the personal User API Key. OAuth2 client_credentials flow is used for authentication, more details about the authentication can be found from the OAuth2 endpoint.  ### Timestamps  Timestamps returned by the API is be presented as UTC and in the ISO8601 format. Timestamps provided in the requests should also be presented in this way.   ``` 2016-09-23T09:09:06Z ```  ### Error handling Errors are presented using the HTTP status codes 400-599. The response include a more detailed explanation about the error in the body.  ``` {   \"code\": \"internal_error_code\",   \"message\": \"Cleartext explanation of the error that occurred\",   \"details\": [     \"More details\",     \"about the error\"   ] } ```  ### Generic API errors These error responses can be returned by any of the described endpoints.  | HTTP status  |  Description | |---|---| | 400| Bad input parameters or invalid request. More information can be found in the response body. | 401| The consumer does not have access to the requested resource or the provided token is not valid. | 404| The requested resource can not be found or the user does not have access to the resource. | 5XX| A server error has occurred while processing the request.
 *
 * OpenAPI spec version: 0.85.74
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Vertaislaina\Maventa\AutoXChange\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Vertaislaina\Maventa\AutoXChange\ApiException;
use Vertaislaina\Maventa\AutoXChange\Configuration;
use Vertaislaina\Maventa\AutoXChange\HeaderSelector;
use Vertaislaina\Maventa\AutoXChange\ObjectSerializer;

/**
 * DocumentsApi Class Doc Comment
 *
 * @category Class
 * @package  Vertaislaina\Maventa\AutoXChange
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DocumentsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getV1Documents
     *
     * Query documents
     *
     * @param  string $direction Received or sent documents (optional)
     * @param  string[] $type List of document types.                                                     Possible values: UNKNOWN, INVOICE, CREDIT_NOTE, ORDER, ORDER_RESPONSE, CATALOGUE, CATALOGUE_RESPONSE, SELF_BILLING_INVOICE, DESPATCH_ADVICE, RECEIPT, VOUCHER, BANK_FILE, REMINDER, SCAN, EXPRESSION_OF_INTEREST_REQUEST, EXPRESSION_OF_INTEREST_RESPONSE, TENDER_STATUS_REQUEST, CALL_FOR_TENDERS, TENDER, TENDER_RECEIPT (optional)
     * @param  string[] $status List of document states.                                                     Possible values: PROCESSING, DELIVERED, CONFIRMED_DELIVERY, FAILED (optional)
     * @param  \DateTime $createdAtStart Creation time (optional)
     * @param  \DateTime $createdAtEnd Creation time (optional)
     * @param  string $number Document number (optional)
     * @param  string $reference Document reference (optional)
     * @param  string $query Query Documents on multiple fields. (Exact matches on id, reference and number) (optional)
     * @param  string[] $sort List of fields used for sorting.   Ascending by default, include \&quot;-\&quot; before the field name to reverse the order (descending).   Supported values: **id, type, status, number, reference, created_at, received_at**   E.g. [-created_at, number] (optional)
     * @param  int $page Page to fetch (optional, default to 1)
     * @param  int $perPage Number of items per page, values up to 100 supported (optional, default to 10)
     * @param  string[] $fields Fields to return in response (optional)
     *
     * @throws \Vertaislaina\Maventa\AutoXChange\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Vertaislaina\Maventa\AutoXChange\Entity\Document[]
     */
    public function getV1Documents($direction = null, $type = null, $status = null, $createdAtStart = null, $createdAtEnd = null, $number = null, $reference = null, $query = null, $sort = null, $page = '1', $perPage = '10', $fields = null)
    {
        list($response) = $this->getV1DocumentsWithHttpInfo($direction, $type, $status, $createdAtStart, $createdAtEnd, $number, $reference, $query, $sort, $page, $perPage, $fields);
        return $response;
    }

    /**
     * Operation getV1DocumentsWithHttpInfo
     *
     * Query documents
     *
     * @param  string $direction Received or sent documents (optional)
     * @param  string[] $type List of document types.                                                     Possible values: UNKNOWN, INVOICE, CREDIT_NOTE, ORDER, ORDER_RESPONSE, CATALOGUE, CATALOGUE_RESPONSE, SELF_BILLING_INVOICE, DESPATCH_ADVICE, RECEIPT, VOUCHER, BANK_FILE, REMINDER, SCAN, EXPRESSION_OF_INTEREST_REQUEST, EXPRESSION_OF_INTEREST_RESPONSE, TENDER_STATUS_REQUEST, CALL_FOR_TENDERS, TENDER, TENDER_RECEIPT (optional)
     * @param  string[] $status List of document states.                                                     Possible values: PROCESSING, DELIVERED, CONFIRMED_DELIVERY, FAILED (optional)
     * @param  \DateTime $createdAtStart Creation time (optional)
     * @param  \DateTime $createdAtEnd Creation time (optional)
     * @param  string $number Document number (optional)
     * @param  string $reference Document reference (optional)
     * @param  string $query Query Documents on multiple fields. (Exact matches on id, reference and number) (optional)
     * @param  string[] $sort List of fields used for sorting.   Ascending by default, include \&quot;-\&quot; before the field name to reverse the order (descending).   Supported values: **id, type, status, number, reference, created_at, received_at**   E.g. [-created_at, number] (optional)
     * @param  int $page Page to fetch (optional, default to 1)
     * @param  int $perPage Number of items per page, values up to 100 supported (optional, default to 10)
     * @param  string[] $fields Fields to return in response (optional)
     *
     * @throws \Vertaislaina\Maventa\AutoXChange\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Vertaislaina\Maventa\AutoXChange\Entity\Document[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getV1DocumentsWithHttpInfo($direction = null, $type = null, $status = null, $createdAtStart = null, $createdAtEnd = null, $number = null, $reference = null, $query = null, $sort = null, $page = '1', $perPage = '10', $fields = null)
    {
        $returnType = '\Vertaislaina\Maventa\AutoXChange\Entity\Document[]';
        $request = $this->getV1DocumentsRequest($direction, $type, $status, $createdAtStart, $createdAtEnd, $number, $reference, $query, $sort, $page, $perPage, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Vertaislaina\Maventa\AutoXChange\Entity\Document[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getV1DocumentsAsync
     *
     * Query documents
     *
     * @param  string $direction Received or sent documents (optional)
     * @param  string[] $type List of document types.                                                     Possible values: UNKNOWN, INVOICE, CREDIT_NOTE, ORDER, ORDER_RESPONSE, CATALOGUE, CATALOGUE_RESPONSE, SELF_BILLING_INVOICE, DESPATCH_ADVICE, RECEIPT, VOUCHER, BANK_FILE, REMINDER, SCAN, EXPRESSION_OF_INTEREST_REQUEST, EXPRESSION_OF_INTEREST_RESPONSE, TENDER_STATUS_REQUEST, CALL_FOR_TENDERS, TENDER, TENDER_RECEIPT (optional)
     * @param  string[] $status List of document states.                                                     Possible values: PROCESSING, DELIVERED, CONFIRMED_DELIVERY, FAILED (optional)
     * @param  \DateTime $createdAtStart Creation time (optional)
     * @param  \DateTime $createdAtEnd Creation time (optional)
     * @param  string $number Document number (optional)
     * @param  string $reference Document reference (optional)
     * @param  string $query Query Documents on multiple fields. (Exact matches on id, reference and number) (optional)
     * @param  string[] $sort List of fields used for sorting.   Ascending by default, include \&quot;-\&quot; before the field name to reverse the order (descending).   Supported values: **id, type, status, number, reference, created_at, received_at**   E.g. [-created_at, number] (optional)
     * @param  int $page Page to fetch (optional, default to 1)
     * @param  int $perPage Number of items per page, values up to 100 supported (optional, default to 10)
     * @param  string[] $fields Fields to return in response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV1DocumentsAsync($direction = null, $type = null, $status = null, $createdAtStart = null, $createdAtEnd = null, $number = null, $reference = null, $query = null, $sort = null, $page = '1', $perPage = '10', $fields = null)
    {
        return $this->getV1DocumentsAsyncWithHttpInfo($direction, $type, $status, $createdAtStart, $createdAtEnd, $number, $reference, $query, $sort, $page, $perPage, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getV1DocumentsAsyncWithHttpInfo
     *
     * Query documents
     *
     * @param  string $direction Received or sent documents (optional)
     * @param  string[] $type List of document types.                                                     Possible values: UNKNOWN, INVOICE, CREDIT_NOTE, ORDER, ORDER_RESPONSE, CATALOGUE, CATALOGUE_RESPONSE, SELF_BILLING_INVOICE, DESPATCH_ADVICE, RECEIPT, VOUCHER, BANK_FILE, REMINDER, SCAN, EXPRESSION_OF_INTEREST_REQUEST, EXPRESSION_OF_INTEREST_RESPONSE, TENDER_STATUS_REQUEST, CALL_FOR_TENDERS, TENDER, TENDER_RECEIPT (optional)
     * @param  string[] $status List of document states.                                                     Possible values: PROCESSING, DELIVERED, CONFIRMED_DELIVERY, FAILED (optional)
     * @param  \DateTime $createdAtStart Creation time (optional)
     * @param  \DateTime $createdAtEnd Creation time (optional)
     * @param  string $number Document number (optional)
     * @param  string $reference Document reference (optional)
     * @param  string $query Query Documents on multiple fields. (Exact matches on id, reference and number) (optional)
     * @param  string[] $sort List of fields used for sorting.   Ascending by default, include \&quot;-\&quot; before the field name to reverse the order (descending).   Supported values: **id, type, status, number, reference, created_at, received_at**   E.g. [-created_at, number] (optional)
     * @param  int $page Page to fetch (optional, default to 1)
     * @param  int $perPage Number of items per page, values up to 100 supported (optional, default to 10)
     * @param  string[] $fields Fields to return in response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV1DocumentsAsyncWithHttpInfo($direction = null, $type = null, $status = null, $createdAtStart = null, $createdAtEnd = null, $number = null, $reference = null, $query = null, $sort = null, $page = '1', $perPage = '10', $fields = null)
    {
        $returnType = '\Vertaislaina\Maventa\AutoXChange\Entity\Document[]';
        $request = $this->getV1DocumentsRequest($direction, $type, $status, $createdAtStart, $createdAtEnd, $number, $reference, $query, $sort, $page, $perPage, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getV1Documents'
     *
     * @param  string $direction Received or sent documents (optional)
     * @param  string[] $type List of document types.                                                     Possible values: UNKNOWN, INVOICE, CREDIT_NOTE, ORDER, ORDER_RESPONSE, CATALOGUE, CATALOGUE_RESPONSE, SELF_BILLING_INVOICE, DESPATCH_ADVICE, RECEIPT, VOUCHER, BANK_FILE, REMINDER, SCAN, EXPRESSION_OF_INTEREST_REQUEST, EXPRESSION_OF_INTEREST_RESPONSE, TENDER_STATUS_REQUEST, CALL_FOR_TENDERS, TENDER, TENDER_RECEIPT (optional)
     * @param  string[] $status List of document states.                                                     Possible values: PROCESSING, DELIVERED, CONFIRMED_DELIVERY, FAILED (optional)
     * @param  \DateTime $createdAtStart Creation time (optional)
     * @param  \DateTime $createdAtEnd Creation time (optional)
     * @param  string $number Document number (optional)
     * @param  string $reference Document reference (optional)
     * @param  string $query Query Documents on multiple fields. (Exact matches on id, reference and number) (optional)
     * @param  string[] $sort List of fields used for sorting.   Ascending by default, include \&quot;-\&quot; before the field name to reverse the order (descending).   Supported values: **id, type, status, number, reference, created_at, received_at**   E.g. [-created_at, number] (optional)
     * @param  int $page Page to fetch (optional, default to 1)
     * @param  int $perPage Number of items per page, values up to 100 supported (optional, default to 10)
     * @param  string[] $fields Fields to return in response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getV1DocumentsRequest($direction = null, $type = null, $status = null, $createdAtStart = null, $createdAtEnd = null, $number = null, $reference = null, $query = null, $sort = null, $page = '1', $perPage = '10', $fields = null)
    {

        $resourcePath = '/v1/documents';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($direction !== null) {
            $queryParams['direction'] = ObjectSerializer::toQueryValue($direction);
        }
        // query params
        if (is_array($type)) {
            $queryParams['type'] = $type;
        } else
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type);
        }
        // query params
        if (is_array($status)) {
            $queryParams['status'] = $status;
        } else
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($createdAtStart !== null) {
            $queryParams['created_at_start'] = ObjectSerializer::toQueryValue($createdAtStart);
        }
        // query params
        if ($createdAtEnd !== null) {
            $queryParams['created_at_end'] = ObjectSerializer::toQueryValue($createdAtEnd);
        }
        // query params
        if ($number !== null) {
            $queryParams['number'] = ObjectSerializer::toQueryValue($number);
        }
        // query params
        if ($reference !== null) {
            $queryParams['reference'] = ObjectSerializer::toQueryValue($reference);
        }
        // query params
        if ($query !== null) {
            $queryParams['query'] = ObjectSerializer::toQueryValue($query);
        }
        // query params
        if (is_array($sort)) {
            $queryParams['sort'] = $sort;
        } else
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }
        // query params
        if (is_array($fields)) {
            $queryParams['fields'] = $fields;
        } else
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getV1DocumentsId
     *
     * @param  string $id ID of Document (required)
     * @param  string[] $returnFormat Content type for the details. Will return the stored metadata as default. (optional)
     * @param  string[] $fields Fields to return in response (optional)
     *
     * @throws \Vertaislaina\Maventa\AutoXChange\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Vertaislaina\Maventa\AutoXChange\Entity\Document
     */
    public function getV1DocumentsId($id, $returnFormat = null, $fields = null)
    {
        list($response) = $this->getV1DocumentsIdWithHttpInfo($id, $returnFormat, $fields);
        return $response;
    }

    /**
     * Operation getV1DocumentsIdWithHttpInfo
     *
     * @param  string $id ID of Document (required)
     * @param  string[] $returnFormat Content type for the details. Will return the stored metadata as default. (optional)
     * @param  string[] $fields Fields to return in response (optional)
     *
     * @throws \Vertaislaina\Maventa\AutoXChange\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Vertaislaina\Maventa\AutoXChange\Entity\Document, HTTP status code, HTTP response headers (array of strings)
     */
    public function getV1DocumentsIdWithHttpInfo($id, $returnFormat = null, $fields = null)
    {
        $returnType = '\Vertaislaina\Maventa\AutoXChange\Entity\Document';
        $request = $this->getV1DocumentsIdRequest($id, $returnFormat, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Vertaislaina\Maventa\AutoXChange\Entity\Document',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getV1DocumentsIdAsync
     *
     * 
     *
     * @param  string $id ID of Document (required)
     * @param  string[] $returnFormat Content type for the details. Will return the stored metadata as default. (optional)
     * @param  string[] $fields Fields to return in response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV1DocumentsIdAsync($id, $returnFormat = null, $fields = null)
    {
        return $this->getV1DocumentsIdAsyncWithHttpInfo($id, $returnFormat, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getV1DocumentsIdAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id ID of Document (required)
     * @param  string[] $returnFormat Content type for the details. Will return the stored metadata as default. (optional)
     * @param  string[] $fields Fields to return in response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV1DocumentsIdAsyncWithHttpInfo($id, $returnFormat = null, $fields = null)
    {
        $returnType = '\Vertaislaina\Maventa\AutoXChange\Entity\Document';
        $request = $this->getV1DocumentsIdRequest($id, $returnFormat, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getV1DocumentsId'
     *
     * @param  string $id ID of Document (required)
     * @param  string[] $returnFormat Content type for the details. Will return the stored metadata as default. (optional)
     * @param  string[] $fields Fields to return in response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getV1DocumentsIdRequest($id, $returnFormat = null, $fields = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getV1DocumentsId'
            );
        }

        $resourcePath = '/v1/documents/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($returnFormat)) {
            $queryParams['return_format'] = $returnFormat;
        } else
        if ($returnFormat !== null) {
            $queryParams['return_format'] = ObjectSerializer::toQueryValue($returnFormat);
        }
        // query params
        if (is_array($fields)) {
            $queryParams['fields'] = $fields;
        } else
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getV1DocumentsIdEvents
     *
     * @param  string $id ID of Document (required)
     * @param  string[] $fields Fields to return in response (optional)
     *
     * @throws \Vertaislaina\Maventa\AutoXChange\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Vertaislaina\Maventa\AutoXChange\Entity\DocumentEvent
     */
    public function getV1DocumentsIdEvents($id, $fields = null)
    {
        list($response) = $this->getV1DocumentsIdEventsWithHttpInfo($id, $fields);
        return $response;
    }

    /**
     * Operation getV1DocumentsIdEventsWithHttpInfo
     *
     * @param  string $id ID of Document (required)
     * @param  string[] $fields Fields to return in response (optional)
     *
     * @throws \Vertaislaina\Maventa\AutoXChange\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Vertaislaina\Maventa\AutoXChange\Entity\DocumentEvent, HTTP status code, HTTP response headers (array of strings)
     */
    public function getV1DocumentsIdEventsWithHttpInfo($id, $fields = null)
    {
        $returnType = '\Vertaislaina\Maventa\AutoXChange\Entity\DocumentEvent';
        $request = $this->getV1DocumentsIdEventsRequest($id, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Vertaislaina\Maventa\AutoXChange\Entity\DocumentEvent',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getV1DocumentsIdEventsAsync
     *
     * 
     *
     * @param  string $id ID of Document (required)
     * @param  string[] $fields Fields to return in response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV1DocumentsIdEventsAsync($id, $fields = null)
    {
        return $this->getV1DocumentsIdEventsAsyncWithHttpInfo($id, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getV1DocumentsIdEventsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id ID of Document (required)
     * @param  string[] $fields Fields to return in response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV1DocumentsIdEventsAsyncWithHttpInfo($id, $fields = null)
    {
        $returnType = '\Vertaislaina\Maventa\AutoXChange\Entity\DocumentEvent';
        $request = $this->getV1DocumentsIdEventsRequest($id, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getV1DocumentsIdEvents'
     *
     * @param  string $id ID of Document (required)
     * @param  string[] $fields Fields to return in response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getV1DocumentsIdEventsRequest($id, $fields = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getV1DocumentsIdEvents'
            );
        }

        $resourcePath = '/v1/documents/{id}/events';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($fields)) {
            $queryParams['fields'] = $fields;
        } else
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchV1DocumentsId
     *
     * @param  string $id ID of Document (required)
     * @param  \Vertaislaina\Maventa\AutoXChange\Entity\PatchV1Documents $v1Documents v1Documents (required)
     * @param  string[] $fields Fields to return in response (optional)
     *
     * @throws \Vertaislaina\Maventa\AutoXChange\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function patchV1DocumentsId($id, $v1Documents, $fields = null)
    {
        $this->patchV1DocumentsIdWithHttpInfo($id, $v1Documents, $fields);
    }

    /**
     * Operation patchV1DocumentsIdWithHttpInfo
     *
     * @param  string $id ID of Document (required)
     * @param  \Vertaislaina\Maventa\AutoXChange\Entity\PatchV1Documents $v1Documents (required)
     * @param  string[] $fields Fields to return in response (optional)
     *
     * @throws \Vertaislaina\Maventa\AutoXChange\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchV1DocumentsIdWithHttpInfo($id, $v1Documents, $fields = null)
    {
        $returnType = '';
        $request = $this->patchV1DocumentsIdRequest($id, $v1Documents, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Vertaislaina\Maventa\AutoXChange\Entity\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation patchV1DocumentsIdAsync
     *
     * 
     *
     * @param  string $id ID of Document (required)
     * @param  \Vertaislaina\Maventa\AutoXChange\Entity\PatchV1Documents $v1Documents (required)
     * @param  string[] $fields Fields to return in response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchV1DocumentsIdAsync($id, $v1Documents, $fields = null)
    {
        return $this->patchV1DocumentsIdAsyncWithHttpInfo($id, $v1Documents, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchV1DocumentsIdAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id ID of Document (required)
     * @param  \Vertaislaina\Maventa\AutoXChange\Entity\PatchV1Documents $v1Documents (required)
     * @param  string[] $fields Fields to return in response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchV1DocumentsIdAsyncWithHttpInfo($id, $v1Documents, $fields = null)
    {
        $returnType = '';
        $request = $this->patchV1DocumentsIdRequest($id, $v1Documents, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchV1DocumentsId'
     *
     * @param  string $id ID of Document (required)
     * @param  \Vertaislaina\Maventa\AutoXChange\Entity\PatchV1Documents $v1Documents (required)
     * @param  string[] $fields Fields to return in response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function patchV1DocumentsIdRequest($id, $v1Documents, $fields = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling patchV1DocumentsId'
            );
        }
        // verify the required parameter 'v1Documents' is set
        if ($v1Documents === null || (is_array($v1Documents) && count($v1Documents) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $v1Documents when calling patchV1DocumentsId'
            );
        }

        $resourcePath = '/v1/documents/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($fields)) {
            $queryParams['fields'] = $fields;
        } else
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($v1Documents)) {
            $_tempBody = $v1Documents;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postV1Documents
     *
     * @param  \SplFileObject $file File content as a single file (optional)
     * @param  \SplFileObject $filesNFile File content as one of multiple (optional)
     * @param  string $filesNFileType File type (optional)
     * @param  string $referencesNReferenceId Reference to use for the document (optional)
     * @param  string $referencesNReferenceIdType Type of reference id (optional)
     * @param  string $referencesNChecksum Checksum of the referenced content (optional)
     * @param  string $referencesNFileType File type (optional)
     * @param  string $type Type of Document (optional)
     * @param  string $documentIdentifier Document identifier for the document (optional)
     * @param  string $processIdentifier Process identifier for the document (optional)
     * @param  string $transmissionId Unique transmission ID (optional)
     * @param  \DateTime $transmissionAt Official transmission timestamp (optional)
     * @param  string $externalId External identifier linked to the document (optional)
     * @param  string $recipientName Name of Recipient (optional)
     * @param  string $recipientCountry Recipient country in ISO 3166-1 alpha-2 format (2 letters) (optional)
     * @param  string $recipientEia Electronic Invoicing Address of the recipient (optional)
     * @param  string $recipientOperator Operator of Recipient (optional)
     * @param  string $senderName Name of Sender (optional)
     * @param  string $senderCountry Sender country in ISO 3166-1 alpha-2 format (2 letters) (optional)
     * @param  string $senderEia Electronic Invoicing Address of the sender (optional)
     * @param  string[] $fields Fields to return in response (optional)
     *
     * @throws \Vertaislaina\Maventa\AutoXChange\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Vertaislaina\Maventa\AutoXChange\Entity\Document
     */
    public function postV1Documents($file = null, $filesNFile = null, $filesNFileType = null, $referencesNReferenceId = null, $referencesNReferenceIdType = null, $referencesNChecksum = null, $referencesNFileType = null, $type = null, $documentIdentifier = null, $processIdentifier = null, $transmissionId = null, $transmissionAt = null, $externalId = null, $recipientName = null, $recipientCountry = null, $recipientEia = null, $recipientOperator = null, $senderName = null, $senderCountry = null, $senderEia = null, $fields = null)
    {
        list($response) = $this->postV1DocumentsWithHttpInfo($file, $filesNFile, $filesNFileType, $referencesNReferenceId, $referencesNReferenceIdType, $referencesNChecksum, $referencesNFileType, $type, $documentIdentifier, $processIdentifier, $transmissionId, $transmissionAt, $externalId, $recipientName, $recipientCountry, $recipientEia, $recipientOperator, $senderName, $senderCountry, $senderEia, $fields);
        return $response;
    }

    /**
     * Operation postV1DocumentsWithHttpInfo
     *
     * @param  \SplFileObject $file File content as a single file (optional)
     * @param  \SplFileObject $filesNFile File content as one of multiple (optional)
     * @param  string $filesNFileType File type (optional)
     * @param  string $referencesNReferenceId Reference to use for the document (optional)
     * @param  string $referencesNReferenceIdType Type of reference id (optional)
     * @param  string $referencesNChecksum Checksum of the referenced content (optional)
     * @param  string $referencesNFileType File type (optional)
     * @param  string $type Type of Document (optional)
     * @param  string $documentIdentifier Document identifier for the document (optional)
     * @param  string $processIdentifier Process identifier for the document (optional)
     * @param  string $transmissionId Unique transmission ID (optional)
     * @param  \DateTime $transmissionAt Official transmission timestamp (optional)
     * @param  string $externalId External identifier linked to the document (optional)
     * @param  string $recipientName Name of Recipient (optional)
     * @param  string $recipientCountry Recipient country in ISO 3166-1 alpha-2 format (2 letters) (optional)
     * @param  string $recipientEia Electronic Invoicing Address of the recipient (optional)
     * @param  string $recipientOperator Operator of Recipient (optional)
     * @param  string $senderName Name of Sender (optional)
     * @param  string $senderCountry Sender country in ISO 3166-1 alpha-2 format (2 letters) (optional)
     * @param  string $senderEia Electronic Invoicing Address of the sender (optional)
     * @param  string[] $fields Fields to return in response (optional)
     *
     * @throws \Vertaislaina\Maventa\AutoXChange\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Vertaislaina\Maventa\AutoXChange\Entity\Document, HTTP status code, HTTP response headers (array of strings)
     */
    public function postV1DocumentsWithHttpInfo($file = null, $filesNFile = null, $filesNFileType = null, $referencesNReferenceId = null, $referencesNReferenceIdType = null, $referencesNChecksum = null, $referencesNFileType = null, $type = null, $documentIdentifier = null, $processIdentifier = null, $transmissionId = null, $transmissionAt = null, $externalId = null, $recipientName = null, $recipientCountry = null, $recipientEia = null, $recipientOperator = null, $senderName = null, $senderCountry = null, $senderEia = null, $fields = null)
    {
        $returnType = '\Vertaislaina\Maventa\AutoXChange\Entity\Document';
        $request = $this->postV1DocumentsRequest($file, $filesNFile, $filesNFileType, $referencesNReferenceId, $referencesNReferenceIdType, $referencesNChecksum, $referencesNFileType, $type, $documentIdentifier, $processIdentifier, $transmissionId, $transmissionAt, $externalId, $recipientName, $recipientCountry, $recipientEia, $recipientOperator, $senderName, $senderCountry, $senderEia, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Vertaislaina\Maventa\AutoXChange\Entity\Document',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Vertaislaina\Maventa\AutoXChange\Entity\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postV1DocumentsAsync
     *
     * 
     *
     * @param  \SplFileObject $file File content as a single file (optional)
     * @param  \SplFileObject $filesNFile File content as one of multiple (optional)
     * @param  string $filesNFileType File type (optional)
     * @param  string $referencesNReferenceId Reference to use for the document (optional)
     * @param  string $referencesNReferenceIdType Type of reference id (optional)
     * @param  string $referencesNChecksum Checksum of the referenced content (optional)
     * @param  string $referencesNFileType File type (optional)
     * @param  string $type Type of Document (optional)
     * @param  string $documentIdentifier Document identifier for the document (optional)
     * @param  string $processIdentifier Process identifier for the document (optional)
     * @param  string $transmissionId Unique transmission ID (optional)
     * @param  \DateTime $transmissionAt Official transmission timestamp (optional)
     * @param  string $externalId External identifier linked to the document (optional)
     * @param  string $recipientName Name of Recipient (optional)
     * @param  string $recipientCountry Recipient country in ISO 3166-1 alpha-2 format (2 letters) (optional)
     * @param  string $recipientEia Electronic Invoicing Address of the recipient (optional)
     * @param  string $recipientOperator Operator of Recipient (optional)
     * @param  string $senderName Name of Sender (optional)
     * @param  string $senderCountry Sender country in ISO 3166-1 alpha-2 format (2 letters) (optional)
     * @param  string $senderEia Electronic Invoicing Address of the sender (optional)
     * @param  string[] $fields Fields to return in response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postV1DocumentsAsync($file = null, $filesNFile = null, $filesNFileType = null, $referencesNReferenceId = null, $referencesNReferenceIdType = null, $referencesNChecksum = null, $referencesNFileType = null, $type = null, $documentIdentifier = null, $processIdentifier = null, $transmissionId = null, $transmissionAt = null, $externalId = null, $recipientName = null, $recipientCountry = null, $recipientEia = null, $recipientOperator = null, $senderName = null, $senderCountry = null, $senderEia = null, $fields = null)
    {
        return $this->postV1DocumentsAsyncWithHttpInfo($file, $filesNFile, $filesNFileType, $referencesNReferenceId, $referencesNReferenceIdType, $referencesNChecksum, $referencesNFileType, $type, $documentIdentifier, $processIdentifier, $transmissionId, $transmissionAt, $externalId, $recipientName, $recipientCountry, $recipientEia, $recipientOperator, $senderName, $senderCountry, $senderEia, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postV1DocumentsAsyncWithHttpInfo
     *
     * 
     *
     * @param  \SplFileObject $file File content as a single file (optional)
     * @param  \SplFileObject $filesNFile File content as one of multiple (optional)
     * @param  string $filesNFileType File type (optional)
     * @param  string $referencesNReferenceId Reference to use for the document (optional)
     * @param  string $referencesNReferenceIdType Type of reference id (optional)
     * @param  string $referencesNChecksum Checksum of the referenced content (optional)
     * @param  string $referencesNFileType File type (optional)
     * @param  string $type Type of Document (optional)
     * @param  string $documentIdentifier Document identifier for the document (optional)
     * @param  string $processIdentifier Process identifier for the document (optional)
     * @param  string $transmissionId Unique transmission ID (optional)
     * @param  \DateTime $transmissionAt Official transmission timestamp (optional)
     * @param  string $externalId External identifier linked to the document (optional)
     * @param  string $recipientName Name of Recipient (optional)
     * @param  string $recipientCountry Recipient country in ISO 3166-1 alpha-2 format (2 letters) (optional)
     * @param  string $recipientEia Electronic Invoicing Address of the recipient (optional)
     * @param  string $recipientOperator Operator of Recipient (optional)
     * @param  string $senderName Name of Sender (optional)
     * @param  string $senderCountry Sender country in ISO 3166-1 alpha-2 format (2 letters) (optional)
     * @param  string $senderEia Electronic Invoicing Address of the sender (optional)
     * @param  string[] $fields Fields to return in response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postV1DocumentsAsyncWithHttpInfo($file = null, $filesNFile = null, $filesNFileType = null, $referencesNReferenceId = null, $referencesNReferenceIdType = null, $referencesNChecksum = null, $referencesNFileType = null, $type = null, $documentIdentifier = null, $processIdentifier = null, $transmissionId = null, $transmissionAt = null, $externalId = null, $recipientName = null, $recipientCountry = null, $recipientEia = null, $recipientOperator = null, $senderName = null, $senderCountry = null, $senderEia = null, $fields = null)
    {
        $returnType = '\Vertaislaina\Maventa\AutoXChange\Entity\Document';
        $request = $this->postV1DocumentsRequest($file, $filesNFile, $filesNFileType, $referencesNReferenceId, $referencesNReferenceIdType, $referencesNChecksum, $referencesNFileType, $type, $documentIdentifier, $processIdentifier, $transmissionId, $transmissionAt, $externalId, $recipientName, $recipientCountry, $recipientEia, $recipientOperator, $senderName, $senderCountry, $senderEia, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postV1Documents'
     *
     * @param  \SplFileObject $file File content as a single file (optional)
     * @param  \SplFileObject $filesNFile File content as one of multiple (optional)
     * @param  string $filesNFileType File type (optional)
     * @param  string $referencesNReferenceId Reference to use for the document (optional)
     * @param  string $referencesNReferenceIdType Type of reference id (optional)
     * @param  string $referencesNChecksum Checksum of the referenced content (optional)
     * @param  string $referencesNFileType File type (optional)
     * @param  string $type Type of Document (optional)
     * @param  string $documentIdentifier Document identifier for the document (optional)
     * @param  string $processIdentifier Process identifier for the document (optional)
     * @param  string $transmissionId Unique transmission ID (optional)
     * @param  \DateTime $transmissionAt Official transmission timestamp (optional)
     * @param  string $externalId External identifier linked to the document (optional)
     * @param  string $recipientName Name of Recipient (optional)
     * @param  string $recipientCountry Recipient country in ISO 3166-1 alpha-2 format (2 letters) (optional)
     * @param  string $recipientEia Electronic Invoicing Address of the recipient (optional)
     * @param  string $recipientOperator Operator of Recipient (optional)
     * @param  string $senderName Name of Sender (optional)
     * @param  string $senderCountry Sender country in ISO 3166-1 alpha-2 format (2 letters) (optional)
     * @param  string $senderEia Electronic Invoicing Address of the sender (optional)
     * @param  string[] $fields Fields to return in response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postV1DocumentsRequest($file = null, $filesNFile = null, $filesNFileType = null, $referencesNReferenceId = null, $referencesNReferenceIdType = null, $referencesNChecksum = null, $referencesNFileType = null, $type = null, $documentIdentifier = null, $processIdentifier = null, $transmissionId = null, $transmissionAt = null, $externalId = null, $recipientName = null, $recipientCountry = null, $recipientEia = null, $recipientOperator = null, $senderName = null, $senderCountry = null, $senderEia = null, $fields = null)
    {

        $resourcePath = '/v1/documents';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($fields)) {
            $queryParams['fields'] = $fields;
        } else
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }


        // form params
        if ($file !== null) {
            $multipart = true;
            $formParams['file'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($file), 'rb');
        }
        // form params
        if ($filesNFile !== null) {
            $multipart = true;
            $formParams['files[n][file]'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($filesNFile), 'rb');
        }
        // form params
        if ($filesNFileType !== null) {
            $formParams['files[n][file_type]'] = ObjectSerializer::toFormValue($filesNFileType);
        }
        // form params
        if ($referencesNReferenceId !== null) {
            $formParams['references[n][reference_id]'] = ObjectSerializer::toFormValue($referencesNReferenceId);
        }
        // form params
        if ($referencesNReferenceIdType !== null) {
            $formParams['references[n][reference_id_type]'] = ObjectSerializer::toFormValue($referencesNReferenceIdType);
        }
        // form params
        if ($referencesNChecksum !== null) {
            $formParams['references[n][checksum]'] = ObjectSerializer::toFormValue($referencesNChecksum);
        }
        // form params
        if ($referencesNFileType !== null) {
            $formParams['references[n][file_type]'] = ObjectSerializer::toFormValue($referencesNFileType);
        }
        // form params
        if ($type !== null) {
            $formParams['type'] = ObjectSerializer::toFormValue($type);
        }
        // form params
        if ($documentIdentifier !== null) {
            $formParams['document_identifier'] = ObjectSerializer::toFormValue($documentIdentifier);
        }
        // form params
        if ($processIdentifier !== null) {
            $formParams['process_identifier'] = ObjectSerializer::toFormValue($processIdentifier);
        }
        // form params
        if ($transmissionId !== null) {
            $formParams['transmission_id'] = ObjectSerializer::toFormValue($transmissionId);
        }
        // form params
        if ($transmissionAt !== null) {
            $formParams['transmission_at'] = ObjectSerializer::toFormValue($transmissionAt);
        }
        // form params
        if ($externalId !== null) {
            $formParams['external_id'] = ObjectSerializer::toFormValue($externalId);
        }
        // form params
        if ($recipientName !== null) {
            $formParams['recipient_name'] = ObjectSerializer::toFormValue($recipientName);
        }
        // form params
        if ($recipientCountry !== null) {
            $formParams['recipient_country'] = ObjectSerializer::toFormValue($recipientCountry);
        }
        // form params
        if ($recipientEia !== null) {
            $formParams['recipient_eia'] = ObjectSerializer::toFormValue($recipientEia);
        }
        // form params
        if ($recipientOperator !== null) {
            $formParams['recipient_operator'] = ObjectSerializer::toFormValue($recipientOperator);
        }
        // form params
        if ($senderName !== null) {
            $formParams['sender_name'] = ObjectSerializer::toFormValue($senderName);
        }
        // form params
        if ($senderCountry !== null) {
            $formParams['sender_country'] = ObjectSerializer::toFormValue($senderCountry);
        }
        // form params
        if ($senderEia !== null) {
            $formParams['sender_eia'] = ObjectSerializer::toFormValue($senderEia);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
