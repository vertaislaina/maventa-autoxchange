<?php
/**
 * ConsumerRoutes
 *
 * PHP version 5
 *
 * @category Class
 * @package  Vertaislaina\Maventa\AutoXChange
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AutoXChange API
 *
 * ### Changelog #### 2020-10-28 13:17 UTC id:5d9c56d0 (0.85.78) - Do not use bid only when looking in Peppol directory  #### 2020-10-28 10:02 UTC id:2cff14f6 (0.85.77) - Return bad request when the network_settings parameter format is invalid on POST company/profile operation for FI BANK network  #### 2020-10-27 12:39 UTC id:fa7472c9 (0.85.76) - Fix FINVOICE20 and FINVOICE13 formats for the POST /v1/invoices endpoint  #### 2020-10-26 13:41 UTC id:e41dceba (0.85.75) - Return error on old ordering profile registration  #### 2020-10-22 11:16 UTC id:a2f621ff (0.85.74)   ### Credentials  The API consumer is authenticated as a company and a user using the Company UUID and the personal User API Key. OAuth2 client_credentials flow is used for authentication, more details about the authentication can be found from the OAuth2 endpoint.  ### Timestamps  Timestamps returned by the API is be presented as UTC and in the ISO8601 format. Timestamps provided in the requests should also be presented in this way.   ``` 2016-09-23T09:09:06Z ```  ### Error handling Errors are presented using the HTTP status codes 400-599. The response include a more detailed explanation about the error in the body.  ``` {   \"code\": \"internal_error_code\",   \"message\": \"Cleartext explanation of the error that occurred\",   \"details\": [     \"More details\",     \"about the error\"   ] } ```  ### Generic API errors These error responses can be returned by any of the described endpoints.  | HTTP status  |  Description | |---|---| | 400| Bad input parameters or invalid request. More information can be found in the response body. | 401| The consumer does not have access to the requested resource or the provided token is not valid. | 404| The requested resource can not be found or the user does not have access to the resource. | 5XX| A server error has occurred while processing the request.
 *
 * OpenAPI spec version: 0.85.78
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Vertaislaina\Maventa\AutoXChange\Entity;

use \ArrayAccess;
use \Vertaislaina\Maventa\AutoXChange\ObjectSerializer;

/**
 * ConsumerRoutes Class Doc Comment
 *
 * @category Class
 * @package  Vertaislaina\Maventa\AutoXChange
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ConsumerRoutes implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Consumer_routes';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'dpi' => '\Vertaislaina\Maventa\AutoXChange\Entity\DpiRoute',
        'vipps' => '\Vertaislaina\Maventa\AutoXChange\Entity\VippsRoute',
        'cv' => '\Vertaislaina\Maventa\AutoXChange\Entity\CvRoute',
        'yes2all' => '\Vertaislaina\Maventa\AutoXChange\Entity\Yes2AllRoute'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'dpi' => null,
        'vipps' => null,
        'cv' => null,
        'yes2all' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'dpi' => 'dpi',
        'vipps' => 'vipps',
        'cv' => 'cv',
        'yes2all' => 'yes2all'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'dpi' => 'setDpi',
        'vipps' => 'setVipps',
        'cv' => 'setCv',
        'yes2all' => 'setYes2all'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'dpi' => 'getDpi',
        'vipps' => 'getVipps',
        'cv' => 'getCv',
        'yes2all' => 'getYes2all'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['dpi'] = isset($data['dpi']) ? $data['dpi'] : null;
        $this->container['vipps'] = isset($data['vipps']) ? $data['vipps'] : null;
        $this->container['cv'] = isset($data['cv']) ? $data['cv'] : null;
        $this->container['yes2all'] = isset($data['yes2all']) ? $data['yes2all'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets dpi
     *
     * @return \Vertaislaina\Maventa\AutoXChange\Entity\DpiRoute
     */
    public function getDpi()
    {
        return $this->container['dpi'];
    }

    /**
     * Sets dpi
     *
     * @param \Vertaislaina\Maventa\AutoXChange\Entity\DpiRoute $dpi DPI route information
     *
     * @return $this
     */
    public function setDpi($dpi)
    {
        $this->container['dpi'] = $dpi;

        return $this;
    }

    /**
     * Gets vipps
     *
     * @return \Vertaislaina\Maventa\AutoXChange\Entity\VippsRoute
     */
    public function getVipps()
    {
        return $this->container['vipps'];
    }

    /**
     * Sets vipps
     *
     * @param \Vertaislaina\Maventa\AutoXChange\Entity\VippsRoute $vipps Vipps route information
     *
     * @return $this
     */
    public function setVipps($vipps)
    {
        $this->container['vipps'] = $vipps;

        return $this;
    }

    /**
     * Gets cv
     *
     * @return \Vertaislaina\Maventa\AutoXChange\Entity\CvRoute
     */
    public function getCv()
    {
        return $this->container['cv'];
    }

    /**
     * Sets cv
     *
     * @param \Vertaislaina\Maventa\AutoXChange\Entity\CvRoute $cv Netbank via CV registry
     *
     * @return $this
     */
    public function setCv($cv)
    {
        $this->container['cv'] = $cv;

        return $this;
    }

    /**
     * Gets yes2all
     *
     * @return \Vertaislaina\Maventa\AutoXChange\Entity\Yes2AllRoute
     */
    public function getYes2all()
    {
        return $this->container['yes2all'];
    }

    /**
     * Sets yes2all
     *
     * @param \Vertaislaina\Maventa\AutoXChange\Entity\Yes2AllRoute $yes2all Netbank via Yes2All registry
     *
     * @return $this
     */
    public function setYes2all($yes2all)
    {
        $this->container['yes2all'] = $yes2all;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


