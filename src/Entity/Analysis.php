<?php
/**
 * Analysis
 *
 * PHP version 5
 *
 * @category Class
 * @package  Vertaislaina\Maventa\AutoXChange
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AutoXChange API
 *
 * ### Changelog #### 2021-04-19 12:49 UTC id:17d03991 (0.85.122) - Added email reports to company settings  #### 2021-04-16 11:39 UTC id:9986b15f (0.85.121)  #### 2021-04-15 13:38 UTC id:916907e3 (0.85.120) - Allow NL companies to change print attachments setting in invoice sending  #### 2021-04-15 13:01 UTC id:7a79b14f (0.85.119) - Show full error message in invoice events  #### 2021-04-13 06:35 UTC id:3c595833 (0.85.118) - Operator company scopes   ### Credentials  The API consumer is authenticated as a company and a user using the Company UUID and the personal User API Key. OAuth2 client_credentials flow is used for authentication, more details about the authentication can be found from the OAuth2 endpoint.  ### Timestamps  Timestamps returned by the API is be presented as UTC and in the ISO8601 format. Timestamps provided in the requests should also be presented in this way.   ``` 2016-09-23T09:09:06Z ```  ### Error handling Errors are presented using the HTTP status codes 400-599. The response include a more detailed explanation about the error in the body.  ``` {   \"code\": \"internal_error_code\",   \"message\": \"Cleartext explanation of the error that occurred\",   \"details\": [     \"More details\",     \"about the error\"   ] } ```  ### Generic API errors These error responses can be returned by any of the described endpoints.  | HTTP status  |  Description | |---|---| | 400| Bad input parameters or invalid request. More information can be found in the response body. | 401| The consumer does not have access to the requested resource or the provided token is not valid. | 404| The requested resource can not be found or the user does not have access to the resource. | 5XX| A server error has occurred while processing the request.
 *
 * OpenAPI spec version: 0.85.122
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Vertaislaina\Maventa\AutoXChange\Entity;

use \ArrayAccess;
use \Vertaislaina\Maventa\AutoXChange\ObjectSerializer;

/**
 * Analysis Class Doc Comment
 *
 * @category Class
 * @description Resource analysis result
 * @package  Vertaislaina\Maventa\AutoXChange
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Analysis implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Analysis';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'analysisId' => 'string',
        'analysisType' => 'string',
        'analysisStatus' => 'string',
        'analysisTitle' => 'string',
        'analysisTitles' => '\Vertaislaina\Maventa\AutoXChange\Entity\Translation[]',
        'analysisTriggerDate' => '\DateTime',
        'analysisOrigin' => 'string',
        'analysisResult' => '\Vertaislaina\Maventa\AutoXChange\Entity\AnalysisResult'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'analysisId' => null,
        'analysisType' => null,
        'analysisStatus' => null,
        'analysisTitle' => null,
        'analysisTitles' => null,
        'analysisTriggerDate' => 'date-time',
        'analysisOrigin' => null,
        'analysisResult' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'analysisId' => 'analysis_id',
        'analysisType' => 'analysis_type',
        'analysisStatus' => 'analysis_status',
        'analysisTitle' => 'analysis_title',
        'analysisTitles' => 'analysis_titles',
        'analysisTriggerDate' => 'analysis_trigger_date',
        'analysisOrigin' => 'analysis_origin',
        'analysisResult' => 'analysis_result'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'analysisId' => 'setAnalysisId',
        'analysisType' => 'setAnalysisType',
        'analysisStatus' => 'setAnalysisStatus',
        'analysisTitle' => 'setAnalysisTitle',
        'analysisTitles' => 'setAnalysisTitles',
        'analysisTriggerDate' => 'setAnalysisTriggerDate',
        'analysisOrigin' => 'setAnalysisOrigin',
        'analysisResult' => 'setAnalysisResult'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'analysisId' => 'getAnalysisId',
        'analysisType' => 'getAnalysisType',
        'analysisStatus' => 'getAnalysisStatus',
        'analysisTitle' => 'getAnalysisTitle',
        'analysisTitles' => 'getAnalysisTitles',
        'analysisTriggerDate' => 'getAnalysisTriggerDate',
        'analysisOrigin' => 'getAnalysisOrigin',
        'analysisResult' => 'getAnalysisResult'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['analysisId'] = isset($data['analysisId']) ? $data['analysisId'] : null;
        $this->container['analysisType'] = isset($data['analysisType']) ? $data['analysisType'] : null;
        $this->container['analysisStatus'] = isset($data['analysisStatus']) ? $data['analysisStatus'] : null;
        $this->container['analysisTitle'] = isset($data['analysisTitle']) ? $data['analysisTitle'] : null;
        $this->container['analysisTitles'] = isset($data['analysisTitles']) ? $data['analysisTitles'] : null;
        $this->container['analysisTriggerDate'] = isset($data['analysisTriggerDate']) ? $data['analysisTriggerDate'] : null;
        $this->container['analysisOrigin'] = isset($data['analysisOrigin']) ? $data['analysisOrigin'] : null;
        $this->container['analysisResult'] = isset($data['analysisResult']) ? $data['analysisResult'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets analysisId
     *
     * @return string
     */
    public function getAnalysisId()
    {
        return $this->container['analysisId'];
    }

    /**
     * Sets analysisId
     *
     * @param string $analysisId Analysis status
     *
     * @return $this
     */
    public function setAnalysisId($analysisId)
    {
        $this->container['analysisId'] = $analysisId;

        return $this;
    }

    /**
     * Gets analysisType
     *
     * @return string
     */
    public function getAnalysisType()
    {
        return $this->container['analysisType'];
    }

    /**
     * Sets analysisType
     *
     * @param string $analysisType Analysis type
     *
     * @return $this
     */
    public function setAnalysisType($analysisType)
    {
        $this->container['analysisType'] = $analysisType;

        return $this;
    }

    /**
     * Gets analysisStatus
     *
     * @return string
     */
    public function getAnalysisStatus()
    {
        return $this->container['analysisStatus'];
    }

    /**
     * Sets analysisStatus
     *
     * @param string $analysisStatus Analysis status
     *
     * @return $this
     */
    public function setAnalysisStatus($analysisStatus)
    {
        $this->container['analysisStatus'] = $analysisStatus;

        return $this;
    }

    /**
     * Gets analysisTitle
     *
     * @return string
     */
    public function getAnalysisTitle()
    {
        return $this->container['analysisTitle'];
    }

    /**
     * Sets analysisTitle
     *
     * @param string $analysisTitle Analysis title
     *
     * @return $this
     */
    public function setAnalysisTitle($analysisTitle)
    {
        $this->container['analysisTitle'] = $analysisTitle;

        return $this;
    }

    /**
     * Gets analysisTitles
     *
     * @return \Vertaislaina\Maventa\AutoXChange\Entity\Translation[]
     */
    public function getAnalysisTitles()
    {
        return $this->container['analysisTitles'];
    }

    /**
     * Sets analysisTitles
     *
     * @param \Vertaislaina\Maventa\AutoXChange\Entity\Translation[] $analysisTitles Analysis title, translated in all supported languages
     *
     * @return $this
     */
    public function setAnalysisTitles($analysisTitles)
    {
        $this->container['analysisTitles'] = $analysisTitles;

        return $this;
    }

    /**
     * Gets analysisTriggerDate
     *
     * @return \DateTime
     */
    public function getAnalysisTriggerDate()
    {
        return $this->container['analysisTriggerDate'];
    }

    /**
     * Sets analysisTriggerDate
     *
     * @param \DateTime $analysisTriggerDate Timestamp when check was triggered
     *
     * @return $this
     */
    public function setAnalysisTriggerDate($analysisTriggerDate)
    {
        $this->container['analysisTriggerDate'] = $analysisTriggerDate;

        return $this;
    }

    /**
     * Gets analysisOrigin
     *
     * @return string
     */
    public function getAnalysisOrigin()
    {
        return $this->container['analysisOrigin'];
    }

    /**
     * Sets analysisOrigin
     *
     * @param string $analysisOrigin Analysis resource origin
     *
     * @return $this
     */
    public function setAnalysisOrigin($analysisOrigin)
    {
        $this->container['analysisOrigin'] = $analysisOrigin;

        return $this;
    }

    /**
     * Gets analysisResult
     *
     * @return \Vertaislaina\Maventa\AutoXChange\Entity\AnalysisResult
     */
    public function getAnalysisResult()
    {
        return $this->container['analysisResult'];
    }

    /**
     * Sets analysisResult
     *
     * @param \Vertaislaina\Maventa\AutoXChange\Entity\AnalysisResult $analysisResult Result of the analysis
     *
     * @return $this
     */
    public function setAnalysisResult($analysisResult)
    {
        $this->container['analysisResult'] = $analysisResult;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


