<?php
/**
 * UserReport
 *
 * PHP version 5
 *
 * @category Class
 * @package  Vertaislaina\Maventa\AutoXChange
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AutoXChange API
 *
 * ### Changelog #### 2021-04-19 12:49 UTC id:17d03991 (0.85.122) - Added email reports to company settings  #### 2021-04-16 11:39 UTC id:9986b15f (0.85.121)  #### 2021-04-15 13:38 UTC id:916907e3 (0.85.120) - Allow NL companies to change print attachments setting in invoice sending  #### 2021-04-15 13:01 UTC id:7a79b14f (0.85.119) - Show full error message in invoice events  #### 2021-04-13 06:35 UTC id:3c595833 (0.85.118) - Operator company scopes   ### Credentials  The API consumer is authenticated as a company and a user using the Company UUID and the personal User API Key. OAuth2 client_credentials flow is used for authentication, more details about the authentication can be found from the OAuth2 endpoint.  ### Timestamps  Timestamps returned by the API is be presented as UTC and in the ISO8601 format. Timestamps provided in the requests should also be presented in this way.   ``` 2016-09-23T09:09:06Z ```  ### Error handling Errors are presented using the HTTP status codes 400-599. The response include a more detailed explanation about the error in the body.  ``` {   \"code\": \"internal_error_code\",   \"message\": \"Cleartext explanation of the error that occurred\",   \"details\": [     \"More details\",     \"about the error\"   ] } ```  ### Generic API errors These error responses can be returned by any of the described endpoints.  | HTTP status  |  Description | |---|---| | 400| Bad input parameters or invalid request. More information can be found in the response body. | 401| The consumer does not have access to the requested resource or the provided token is not valid. | 404| The requested resource can not be found or the user does not have access to the resource. | 5XX| A server error has occurred while processing the request.
 *
 * OpenAPI spec version: 0.85.122
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Vertaislaina\Maventa\AutoXChange\Entity;

use \ArrayAccess;
use \Vertaislaina\Maventa\AutoXChange\ObjectSerializer;

/**
 * UserReport Class Doc Comment
 *
 * @category Class
 * @description Fetch user reports for invoice
 * @package  Vertaislaina\Maventa\AutoXChange
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UserReport implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UserReport';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'companyBid' => 'string',
        'companyName' => 'string',
        'companyCountryCode' => 'string',
        'companyBankAccount' => 'string',
        'reporterUserId' => 'string',
        'reporterContactEmail' => 'string',
        'invoiceId' => 'string',
        'reasons' => '\Vertaislaina\Maventa\AutoXChange\Entity\Criteria[]',
        'additionalExplanation' => 'string',
        'reportDate' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'companyBid' => null,
        'companyName' => null,
        'companyCountryCode' => null,
        'companyBankAccount' => null,
        'reporterUserId' => null,
        'reporterContactEmail' => null,
        'invoiceId' => null,
        'reasons' => null,
        'additionalExplanation' => null,
        'reportDate' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'companyBid' => 'company_bid',
        'companyName' => 'company_name',
        'companyCountryCode' => 'company_country_code',
        'companyBankAccount' => 'company_bank_account',
        'reporterUserId' => 'reporter_user_id',
        'reporterContactEmail' => 'reporter_contact_email',
        'invoiceId' => 'invoice_id',
        'reasons' => 'reasons',
        'additionalExplanation' => 'additional_explanation',
        'reportDate' => 'report_date'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'companyBid' => 'setCompanyBid',
        'companyName' => 'setCompanyName',
        'companyCountryCode' => 'setCompanyCountryCode',
        'companyBankAccount' => 'setCompanyBankAccount',
        'reporterUserId' => 'setReporterUserId',
        'reporterContactEmail' => 'setReporterContactEmail',
        'invoiceId' => 'setInvoiceId',
        'reasons' => 'setReasons',
        'additionalExplanation' => 'setAdditionalExplanation',
        'reportDate' => 'setReportDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'companyBid' => 'getCompanyBid',
        'companyName' => 'getCompanyName',
        'companyCountryCode' => 'getCompanyCountryCode',
        'companyBankAccount' => 'getCompanyBankAccount',
        'reporterUserId' => 'getReporterUserId',
        'reporterContactEmail' => 'getReporterContactEmail',
        'invoiceId' => 'getInvoiceId',
        'reasons' => 'getReasons',
        'additionalExplanation' => 'getAdditionalExplanation',
        'reportDate' => 'getReportDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['companyBid'] = isset($data['companyBid']) ? $data['companyBid'] : null;
        $this->container['companyName'] = isset($data['companyName']) ? $data['companyName'] : null;
        $this->container['companyCountryCode'] = isset($data['companyCountryCode']) ? $data['companyCountryCode'] : null;
        $this->container['companyBankAccount'] = isset($data['companyBankAccount']) ? $data['companyBankAccount'] : null;
        $this->container['reporterUserId'] = isset($data['reporterUserId']) ? $data['reporterUserId'] : null;
        $this->container['reporterContactEmail'] = isset($data['reporterContactEmail']) ? $data['reporterContactEmail'] : null;
        $this->container['invoiceId'] = isset($data['invoiceId']) ? $data['invoiceId'] : null;
        $this->container['reasons'] = isset($data['reasons']) ? $data['reasons'] : null;
        $this->container['additionalExplanation'] = isset($data['additionalExplanation']) ? $data['additionalExplanation'] : null;
        $this->container['reportDate'] = isset($data['reportDate']) ? $data['reportDate'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id User report id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets companyBid
     *
     * @return string
     */
    public function getCompanyBid()
    {
        return $this->container['companyBid'];
    }

    /**
     * Sets companyBid
     *
     * @param string $companyBid Bid of reported company
     *
     * @return $this
     */
    public function setCompanyBid($companyBid)
    {
        $this->container['companyBid'] = $companyBid;

        return $this;
    }

    /**
     * Gets companyName
     *
     * @return string
     */
    public function getCompanyName()
    {
        return $this->container['companyName'];
    }

    /**
     * Sets companyName
     *
     * @param string $companyName Name of reported company
     *
     * @return $this
     */
    public function setCompanyName($companyName)
    {
        $this->container['companyName'] = $companyName;

        return $this;
    }

    /**
     * Gets companyCountryCode
     *
     * @return string
     */
    public function getCompanyCountryCode()
    {
        return $this->container['companyCountryCode'];
    }

    /**
     * Sets companyCountryCode
     *
     * @param string $companyCountryCode Country code of reported company
     *
     * @return $this
     */
    public function setCompanyCountryCode($companyCountryCode)
    {
        $this->container['companyCountryCode'] = $companyCountryCode;

        return $this;
    }

    /**
     * Gets companyBankAccount
     *
     * @return string
     */
    public function getCompanyBankAccount()
    {
        return $this->container['companyBankAccount'];
    }

    /**
     * Sets companyBankAccount
     *
     * @param string $companyBankAccount Bank account of reported company
     *
     * @return $this
     */
    public function setCompanyBankAccount($companyBankAccount)
    {
        $this->container['companyBankAccount'] = $companyBankAccount;

        return $this;
    }

    /**
     * Gets reporterUserId
     *
     * @return string
     */
    public function getReporterUserId()
    {
        return $this->container['reporterUserId'];
    }

    /**
     * Sets reporterUserId
     *
     * @param string $reporterUserId Id of reporter user
     *
     * @return $this
     */
    public function setReporterUserId($reporterUserId)
    {
        $this->container['reporterUserId'] = $reporterUserId;

        return $this;
    }

    /**
     * Gets reporterContactEmail
     *
     * @return string
     */
    public function getReporterContactEmail()
    {
        return $this->container['reporterContactEmail'];
    }

    /**
     * Sets reporterContactEmail
     *
     * @param string $reporterContactEmail Contact email of reporter
     *
     * @return $this
     */
    public function setReporterContactEmail($reporterContactEmail)
    {
        $this->container['reporterContactEmail'] = $reporterContactEmail;

        return $this;
    }

    /**
     * Gets invoiceId
     *
     * @return string
     */
    public function getInvoiceId()
    {
        return $this->container['invoiceId'];
    }

    /**
     * Sets invoiceId
     *
     * @param string $invoiceId Reported invoice id
     *
     * @return $this
     */
    public function setInvoiceId($invoiceId)
    {
        $this->container['invoiceId'] = $invoiceId;

        return $this;
    }

    /**
     * Gets reasons
     *
     * @return \Vertaislaina\Maventa\AutoXChange\Entity\Criteria[]
     */
    public function getReasons()
    {
        return $this->container['reasons'];
    }

    /**
     * Sets reasons
     *
     * @param \Vertaislaina\Maventa\AutoXChange\Entity\Criteria[] $reasons Selected reasons at report time
     *
     * @return $this
     */
    public function setReasons($reasons)
    {
        $this->container['reasons'] = $reasons;

        return $this;
    }

    /**
     * Gets additionalExplanation
     *
     * @return string
     */
    public function getAdditionalExplanation()
    {
        return $this->container['additionalExplanation'];
    }

    /**
     * Sets additionalExplanation
     *
     * @param string $additionalExplanation Additional explanation given by the user at report time
     *
     * @return $this
     */
    public function setAdditionalExplanation($additionalExplanation)
    {
        $this->container['additionalExplanation'] = $additionalExplanation;

        return $this;
    }

    /**
     * Gets reportDate
     *
     * @return \DateTime
     */
    public function getReportDate()
    {
        return $this->container['reportDate'];
    }

    /**
     * Sets reportDate
     *
     * @param \DateTime $reportDate Timestamp when report was done
     *
     * @return $this
     */
    public function setReportDate($reportDate)
    {
        $this->container['reportDate'] = $reportDate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


